<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>向宇的博客 | Xiang Yu&#39;s Blog</title>
  
  <subtitle>Hello World, Hello Programming!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://kisky3.github.io/"/>
  <updated>2021-05-13T14:53:29.276Z</updated>
  <id>https://kisky3.github.io/</id>
  
  <author>
    <name>Xiang Yu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Set localStorage Wih JS , Read With CakePHP</title>
    <link href="https://kisky3.github.io/2021/04/19/SetCookieWihJS-ReadWithCakePHP/"/>
    <id>https://kisky3.github.io/2021/04/19/SetCookieWihJS-ReadWithCakePHP/</id>
    <published>2021-04-19T14:55:01.000Z</published>
    <updated>2021-05-13T14:53:29.276Z</updated>
    
    <content type="html"><![CDATA[<p>在js里设定localStorage,并在CakePHP里使用</p><a id="more"></a><p>在最近要在js里设定localStorage,并在CakePHP里读取js的localStorage.而且使用js和CakePHP的地方分别处于两个repo.</p><p>为了解决这个问题,费了一点时间.<br>下面不知道是不是最好的方法,但是能够满足需求了.</p><ol><li>在Javascript里设定localStorage</li></ol><!-- javascript --><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localStorage.setItem(<span class="string">'mytext'</span>, <span class="string">'Hello, World!'</span>);</span><br></pre></td></tr></table></figure><p>如果对期限有要求的话可以考虑使用sessionStorage, 或者自己将时间的数据存到storage里, 并在读取localstorage时获取现在时刻进行对比并追加处理.</p><ol start="2"><li>在CakePHP里创建Element,并在template里通过js引用.<br>例子：</li></ol><p>my-project/myname/Template/Element/helloworld.tpl</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="keyword">var</span> test = localStorage.getItem(<span class="string">"mytext"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(test);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>CakePHP template</p><p>test.tpl</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;$<span class="keyword">this</span>-&gt;Element(<span class="string">'helloworld'</span>)&#125;</span><br><span class="line"><span class="comment">// other CakePHP coding...</span></span><br></pre></td></tr></table></figure><p>这样在加载test.tpl的时候就能够通过element读取之前保存在本地的localstorage了.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在js里设定localStorage,并在CakePHP里使用&lt;/p&gt;
    
    </summary>
    
      <category term="Back-end Knowledge" scheme="https://kisky3.github.io/categories/Back-end-Knowledge/"/>
    
    
      <category term="CakePHP" scheme="https://kisky3.github.io/tags/CakePHP/"/>
    
      <category term="Cookie" scheme="https://kisky3.github.io/tags/Cookie/"/>
    
  </entry>
  
  <entry>
    <title>New Feature - Vue 3&#39;s Full TypeScript Support</title>
    <link href="https://kisky3.github.io/2021/04/09/NewFeaturesinVue3/"/>
    <id>https://kisky3.github.io/2021/04/09/NewFeaturesinVue3/</id>
    <published>2021-04-09T14:58:23.000Z</published>
    <updated>2021-05-13T14:53:29.189Z</updated>
    
    <content type="html"><![CDATA[<p>Vue3的新特性以及对TypeScript的全支持</p><a id="more"></a><p>以前使用Vue2的时候相信很多朋友都没有特别好的体验。<br>但是尤大发布Vue3之后，据说能够友好地拥抱TypeScript了。<br>今天一边谈谈Vue3大新特性一边总结一下在Vue3里使用TypeScript的方法。</p><h2 id="新特性"><a href="#新特性" class="headerlink" title="新特性"></a>新特性</h2><h3 id="Composition-API"><a href="#Composition-API" class="headerlink" title="Composition API"></a>Composition API</h3><p>这是Vue3追加的最受注目的功能。Props和Content就可以生成全体Component都能使用和参照的参数。有点像React Hooks里记述的可以动态参照的参数。</p><p>原本的Vue2的Component里的话一般都像下面这样：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  components: &#123; RepositoriesFilters, RepositoriesSortBy, RepositoriesList &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    user: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      required: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      repositories: [],</span><br><span class="line">      filters: &#123; ... &#125;,</span><br><span class="line">      searchQuery: ''</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    filteredRepositories () &#123; ... &#125;,</span><br><span class="line">    repositoriesMatchingSearchQuery () &#123; ... &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    user: 'getUserRepositories'</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    getUserRepositories () &#123;</span><br><span class="line">      // using `this.user` to fetch user repositories</span><br><span class="line">    &#125;,</span><br><span class="line">    updateFilters () &#123; ... &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    this.getUserRepositories()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样会导致Component变得沉重,本来只是想进行一个处理, 但是却分散在不同的地方，影响可读性。<br>像下面这样同样的处理全部总结写在一处比较好。</p><p>例:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">import &#123; fetchUserRepositories &#125; from '@/api/repositories'</span><br><span class="line">import &#123; ref, onMounted, watch, toRefs, computed &#125; from 'vue'</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    user: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      required: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  setup (props) &#123;</span><br><span class="line">    // using `toRefs` to create a Reactive Reference to the `user` property of props</span><br><span class="line">    const &#123; user &#125; = toRefs(props)</span><br><span class="line"></span><br><span class="line">    const repositories = ref([])</span><br><span class="line">    const getUserRepositories = async () =&gt; &#123;</span><br><span class="line">      // update `props.user` to `user.value` to access the Reference value</span><br><span class="line">      repositories.value = await fetchUserRepositories(user.value)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    onMounted(getUserRepositories)</span><br><span class="line"></span><br><span class="line">    // set a watcher on the Reactive Reference to user prop</span><br><span class="line">    watch(user, getUserRepositories)</span><br><span class="line"></span><br><span class="line">    const searchQuery = ref('')</span><br><span class="line">    const repositoriesMatchingSearchQuery = computed(() =&gt; &#123;</span><br><span class="line">      return repositories.value.filter(</span><br><span class="line">        repository =&gt; repository.name.includes(searchQuery.value)</span><br><span class="line">      )</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      repositories,</span><br><span class="line">      getUserRepositories,</span><br><span class="line">      searchQuery,</span><br><span class="line">      repositoriesMatchingSearchQuery</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>setup</code>返回的值可以供全体Component使用。</li><li><code>toRefs</code>和<code>ref</code>能够参照动态值,Component里使用<code>hoge.value</code>可以动态参照修改后的值。</li><li>支持生命周期,<code>onMounted</code>里可以指定在mount之后实行的参数。</li><li>使用<code>computed</code>后也可以生成computed value。</li></ul><hr><h3 id="Teleport"><a href="#Teleport" class="headerlink" title="Teleport"></a>Teleport</h3><p>Vue Component里的dom的一部分, 在渲染的时候可以在指定的dom下进行描画。<br>在body下描画全画面的model的时候可以使用。</p><p>例子:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">app.component('modal-button', &#123;</span><br><span class="line">  template: `</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"modalOpen = true"</span>&gt;</span></span><br><span class="line">        Open full screen modal! (With teleport!)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">teleport</span> <span class="attr">to</span>=<span class="string">"body"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"modalOpen"</span> <span class="attr">class</span>=<span class="string">"modal"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">          I'm a teleported modal!</span><br><span class="line">          (My parent is "body")</span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"modalOpen = false"</span>&gt;</span></span><br><span class="line">            Close</span><br><span class="line">          <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">teleport</span>&gt;</span></span><br><span class="line">  `,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      modalOpen: false</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><h3 id="Fragments"><a href="#Fragments" class="headerlink" title="Fragments"></a>Fragments</h3><p>在route里放置多个dom.</p><p>例: (v2)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span>...<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">main</span>&gt;</span>...<span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span>...<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>例: (v3)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span>...<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span> <span class="attr">v-bind</span>=<span class="string">"$attrs"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span>...<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="Emits-Component-Option"><a href="#Emits-Component-Option" class="headerlink" title="Emits Component Option"></a>Emits Component Option</h3><p>新追加的option.<br>为了记录Component是怎样运行的, 推荐写在所有emit了的自定义方法里面.</p><p>例:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">app.component('custom-form', &#123;</span><br><span class="line">  emits: &#123;</span><br><span class="line">    // No validation</span><br><span class="line">    click: null,</span><br><span class="line"></span><br><span class="line">    // Validate submit event</span><br><span class="line">    submit: (&#123; email, password &#125;) =&gt; &#123;</span><br><span class="line">      if (email &amp;&amp; password) &#123;</span><br><span class="line">        return true</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        console.warn('Invalid submit event payload!')</span><br><span class="line">        return false</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    submitForm() &#123;</span><br><span class="line">      this.$emit('submit', &#123; email, password &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>也可以使用<code>emit: [&quot;click&quot;, &quot;submit&quot;]</code>这样的数列来进行定义.</li><li>如果使用object来指定参数的话, 将会被作为Validator来运行.</li></ul><hr><h3 id="Custom-Render-createRender"><a href="#Custom-Render-createRender" class="headerlink" title="Custom Render(createRender)"></a>Custom Render(createRender)</h3><p>可以自定义你的渲染器。<br>可以使用option来在渲染的时候插入特定的处理.</p><p>例:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createRenderer &#125; from '@vue/runtime-core'</span><br><span class="line">import &#123; nodeOps &#125; from '@vue/runtime-dom'</span><br><span class="line"></span><br><span class="line">const &#123; render, createApp &#125; = createRenderer(&#123;</span><br><span class="line">  ...nodeOps,</span><br><span class="line">  insert: () =&gt; &#123;&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// `render` is the low-level API</span><br><span class="line">// `createApp` returns an app instance with configurable context shared</span><br><span class="line">// by the entire app tree.</span><br><span class="line">export &#123; render, createApp &#125;</span><br><span class="line"></span><br><span class="line">export * from '@vue/runtime-core'</span><br></pre></td></tr></table></figure><hr><h3 id="TypeScript应对"><a href="#TypeScript应对" class="headerlink" title="TypeScript应对"></a>TypeScript应对</h3><p>下面是重头戏TS的应对.</p><p>定义Component的时候请注意<br>1.<code>script</code>标签里进行ts的声明</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.使用<code>defineComponent</code>参数<br>为了在Component里使用正确的类型定义,这里不使用常用的class,使用以下的参数就必须新生成一个Component.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import &#123; defineComponent &#125; from 'vue'</span><br><span class="line"></span><br><span class="line">const Component = defineComponent(&#123;</span><br><span class="line">  // type inference enabled</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>改变的点：<br>Vue3开始对TS进行全力的支持这一点相信大家都有听过,Vue3里对TS部分进行了全部的重新定义,只是Composition API里对逻辑进行了总结, TS因此变得更好用了?</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Vue3的新特性以及对TypeScript的全支持&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="Vue3" scheme="https://kisky3.github.io/tags/Vue3/"/>
    
      <category term="Typescript" scheme="https://kisky3.github.io/tags/Typescript/"/>
    
  </entry>
  
  <entry>
    <title>About AWS SQS and SNS</title>
    <link href="https://kisky3.github.io/2021/03/11/AboutAWSSQSandSNS/"/>
    <id>https://kisky3.github.io/2021/03/11/AboutAWSSQSandSNS/</id>
    <published>2021-03-10T15:50:23.000Z</published>
    <updated>2021-05-13T15:27:37.588Z</updated>
    
    <content type="html"><![CDATA[<p>AWS的SQS和SNS详解</p><a id="more"></a><h2 id="SQS-Simple-Queue-Service"><a href="#SQS-Simple-Queue-Service" class="headerlink" title="SQS (Simple Queue Service)"></a>SQS (Simple Queue Service)</h2><p><code>Amazon Simple Queue Service (SQS)是一种完全托管的消息队列服务</code>，可以让你分离和扩展微服务、分布式系统和无服务应用程序。</p><p>在讲解SQS之前，首先让我们了解一下什么是消息队列。</p><h4 id="消息队列："><a href="#消息队列：" class="headerlink" title="消息队列："></a>消息队列：</h4><p>消息队列<br>还是举一个电商的例子，一个用户在电商网站下单后付款后，应用服务器马上查询/更新数据库，连接支付网关并查询支付状态，通知短信/邮件网关发送相关短信/邮件，更新库存系统，更新物流系统……最后返回信息给用户，“您的下单已成功”。</p><p>但是如果网站的访问数很大，或者正值促销活动（比如淘宝双11，京东618）呢？</p><p>这个时候每一个流程都是一个瓶颈，一旦某一个地方达到了瓶颈或者出现故障，又或者用户下单的时间比程序处理订单的时间还要久的情况下，都会让用户得不到成功下单的结果，或者得到结果的时间非常长，导致用户体验不好。</p><p>这个时候，我们就要考虑到应用程序的解耦（decouple）。</p><p>我们可以引入消息队列，让不同的应用程序之间打断强连接的关系，互不干扰。</p><p>应用服务器在接收到用户付款的订单之后，就把相关的信息丢到消息队列，并且返回用户“您的下单已成功，请稍后查看详细订单状态”。</p><p>而支付网关、短信/邮件网关、库存系统、物流系统等等可以到消息队列里面拉取信息，并且进行相关的数据更新和操作。</p><p>这些操作可能不需要是实时的，但是至少能保证这些队列里的信息最终都会被执行。比如下单后我不一定马上能收到短信/邮件的通知，我可能5分钟/10分钟之后才收到这些信息通知，但这个并不影响正常的业务。</p><p>这样子，<code>消息队列就起到了连接上层业务和下层业务的作用</code>。</p><p><code>Amazon SQS相当于提供了一个分布式、高可用、高性能的消息队列服务</code>。</p><h4 id="SQS特点"><a href="#SQS特点" class="headerlink" title="SQS特点"></a>SQS特点</h4><p>SQS有两种不同类型的队列，它们分别是：</p><ul><li>标准队列（Standard Queue）</li><li>FIFO队列（先进先出队列）</li></ul><h5 id="标准队列"><a href="#标准队列" class="headerlink" title="标准队列"></a>标准队列</h5><p>标准队列拥有无限的吞吐量，所有消息都会至少传递一次，并且它会尽最大努力进行排序。</p><p>标准队列是默认的队列类型。</p><img src="./1.png" style="width: 300px"><h5 id="FIFO队列"><a href="#FIFO队列" class="headerlink" title="FIFO队列"></a>FIFO队列</h5><p>FIFO (First-in-first-out)队列在不使用批处理的情况下，最多支持300TPS（每秒300个发送、接受或删除操作）。</p><p>在队列中的消息都只会不多不少地被处理一次。</p><p>FIFO队列严格保持消息的发送和接收顺序。</p><img src="./2.png" style="width: 300px"><h3 id="SQS的其他特点"><a href="#SQS的其他特点" class="headerlink" title="SQS的其他特点"></a>SQS的其他特点</h3><ul><li>SQS是靠应用程序去拉取的，而不能主动推送给应用程序，推送服务我们使用SNS（Simple - Notification Service）</li><li>消息会以256 KB的大小存放</li><li>消息会在队列中保存1分钟~14天，默认时间是4天</li><li>可见性超时（Visibility Timeout）<ul><li>即当SQS队列收到新的消息并且被拉取走进行处理时，会触发Visibility Timeout的时间。这个消息不会被删除，而是会被设置为不可见，用来防止该消息在处理的过程中再一次被拉取</li><li>当这个消息被处理完成后，这个消息会在SQS中被删除，表示这个任务已经处理完毕</li><li>如果这个消息在Visibility Timeout时间结束之后还没有被处理完，则这个消息会设置为可见状态，等待另一个程序来进行处理,因此同一个消息可能会被处理两次（或以上）</li><li>这个超时时间最大可以设置为12小时</li></ul></li><li>标准SQS队列保证了每一个在队列内的消息都至少会被处理一次</li><li>长轮询（Long Polling）<ul><li>默认情况下，Amazon SQS使用短轮询（Short Polling），即应用程序每次去查询SQS队列，SQS都会做回应（哪怕队列一直是空的）</li><li>使用了长轮训，应用程序每次去查询SQS队列，SQS队列不会马上做回应。而是等到队列里有消息可处理时，或者等到设定的超时时间再做出回应。</li><li>长轮询可以一定程度减少SQS的花销</li></ul></li></ul><hr><h3 id="SNS-Simple-Notification-Service"><a href="#SNS-Simple-Notification-Service" class="headerlink" title="SNS (Simple Notification Service)"></a>SNS (Simple Notification Service)</h3><p><code>SNS (Simple Notification Service) 是一种完全托管的发布/订阅消息收发和移动通知服务，用于协调向订阅终端节点和客户端的消息分发</code>。</p><p>和SQS (Simple Queue Service)一样，SNS也可以轻松分离和扩展微服务，分布式系统和无服务应用程序，对程序进行解耦。</p><p>我们可以使用SNS将消息推送到SQS消息队列中、AWS Lambda函数或者HTTP终端节点上。</p><p>SNS通知还可以发送推送通知到IOS，安卓，Windows和基于百度的设备，也可以通过电子邮箱或者SMS短信的形式发送到各种不同类型的设备上。</p><img src="./3.png" style="width: 500px"><h4 id="SNS的一些特点"><a href="#SNS的一些特点" class="headerlink" title="SNS的一些特点"></a>SNS的一些特点</h4><ul><li>SNS是实时的推送服务（Push），有别于SQS的拉取服务（Pull/Poll）</li><li>拥有简单的API，可以和其他应用程序兼容</li><li>可以通过多种不同的传输协议进行集成</li><li>便宜、用多少付费多少的服务模型</li><li>在AWS管理控制台上就可以进行简单的操作</li></ul><h4 id="SNS能推送的目标"><a href="#SNS能推送的目标" class="headerlink" title="SNS能推送的目标"></a>SNS能推送的目标</h4><ul><li>HTTP</li><li>HTTPS</li><li>Email</li><li>Email-JSON</li><li>SQS</li><li>Application</li><li>Lambda</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;AWS的SQS和SNS详解&lt;/p&gt;
    
    </summary>
    
      <category term="Back-end Knowledge" scheme="https://kisky3.github.io/categories/Back-end-Knowledge/"/>
    
    
      <category term="AWS" scheme="https://kisky3.github.io/tags/AWS/"/>
    
      <category term="SNS" scheme="https://kisky3.github.io/tags/SNS/"/>
    
      <category term="SQS" scheme="https://kisky3.github.io/tags/SQS/"/>
    
  </entry>
  
  <entry>
    <title>Three.js Memo</title>
    <link href="https://kisky3.github.io/2021/03/10/ThreejsMemo/"/>
    <id>https://kisky3.github.io/2021/03/10/ThreejsMemo/</id>
    <published>2021-03-10T06:22:42.000Z</published>
    <updated>2021-05-13T14:53:29.300Z</updated>
    
    <content type="html"><![CDATA[<p>Three.js学习笔记</p><a id="more"></a><h3 id="1-什么是WebGL"><a href="#1-什么是WebGL" class="headerlink" title="1. 什么是WebGL"></a>1. 什么是WebGL</h3><p>你可以把WebGL简单地认为是一种网络标准，定义了一些较底层的图形接口。在这些标准被定义之后，Chrome、Firefox之类的浏览器实现了这些标准。然后，程序员就能通过JavaScript代码，在网页上实现三维图形的渲染了。</p><h3 id="2-什么是Three-js"><a href="#2-什么是Three-js" class="headerlink" title="2. 什么是Three.js"></a>2. 什么是Three.js</h3><blockquote><p>Three.js是一个3D JavaScript库。</p></blockquote><h3 id="3-Three-js能用来干什么"><a href="#3-Three-js能用来干什么" class="headerlink" title="3. Three.js能用来干什么"></a>3. Three.js能用来干什么</h3><p>Three.js封装了底层的图形接口，使得程序员能够在无需掌握繁冗的图形学知识的情况下，也能用简单的代码实现三维场景的渲染。我们都知道，更高的封装程度往往意味着灵活性的牺牲，但是Three.js在这方面做得很好。几乎不会有WebGL支持而Three.js实现不了的情况，而且就算真的遇到这种情况，你还是能同时使用WebGL去实现，而不会有冲突。</p><h3 id="4-WebGL-vs-Three-js"><a href="#4-WebGL-vs-Three-js" class="headerlink" title="4. WebGL vs. Three.js"></a>4. WebGL vs. Three.js</h3><p>对于一个简单的功能:渲染黑色背景下的白色正方形和三角形,使用原生WebGL接口实现同样功能需要5倍多的代码量，而且很多代码对于没有图形学基础的程序员是很难看懂的。由这个例子我们可以看出，使用Three.js开发要比WebGL更快更高效。尤其对图形学知识不熟悉的程序员而言，使用Three.js能够降低学习成本，提高三维图形程序开发的效率。</p><h3 id="5-开发环境"><a href="#5-开发环境" class="headerlink" title="5. 开发环境"></a>5. 开发环境</h3><p>Three.js是一个JavaScript库，所以，你可以使用平时开发JavaScript应用的环境开发Three.js应用。<br>推荐：Chrome<br>repo：<a href="https://github.com/mrdoob/three.js/tree/master/build" target="_blank" rel="noopener">https://github.com/mrdoob/three.js/tree/master/build</a></p><p>引用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;three.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>然后就能通过全局变量THREE访问到所有属性和方法了。</p><h3 id="6-练习1-Hello-world"><a href="#6-练习1-Hello-world" class="headerlink" title="6. 练习1: Hello, world!"></a>6. 练习1: Hello, world!</h3><p>详细coding请参照我的GitHub repo.</p><p>首先，在HTML的<head><meta name="generator" content="Hexo 3.9.0">部分，需要声明外部文件three.js。</head></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/three.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>WebGL的渲染是需要HTML5 Canvas元素的，你可以手动在HTML的<body>部分中定义Canvas元素，或者让Three.js帮你生成。这两种选择一般没有多大差别，我们在此手动在HTML中定义：<script src="/live2dw/lib/L2Dwidget.min.js?094cbace49a39548bed64abff5988b05"></script><script>L2Dwidget.init({"pluginRootPath":"live2dw/","pluginJsPath":"lib/","pluginModelPath":"assets/","tagMode":false,"log":false,"model":{"jsonPath":"/live2dw/assets/assets/hijiki.model.json"},"display":{"position":"right","width":150,"height":300},"mobile":{"show":true},"react":{"opacity":0.9}});</script></body></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">"init()"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"mainCanvas"</span> <span class="attr">width</span>=<span class="string">"400px"</span> <span class="attr">height</span>=<span class="string">"300px"</span> &gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在JavaScript代码中定义一个init函数，在HTML加载完后执行：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function init() &#123;</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个典型的Three.js程序至少要包括渲染器（Renderer）、场景（Scene）、照相机（Camera），以及你在场景中创建的物体。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Three.js学习笔记&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="three.js" scheme="https://kisky3.github.io/tags/three-js/"/>
    
      <category term="WebGL" scheme="https://kisky3.github.io/tags/WebGL/"/>
    
  </entry>
  
  <entry>
    <title>CentOS6 Error:All mirror URLs are not using ftp, http[s] or file.</title>
    <link href="https://kisky3.github.io/2021/02/23/CentOS6Error/"/>
    <id>https://kisky3.github.io/2021/02/23/CentOS6Error/</id>
    <published>2021-02-22T16:20:34.000Z</published>
    <updated>2021-05-13T15:00:37.845Z</updated>
    
    <content type="html"><![CDATA[<p>CentOS6 Error: All mirror URLs are not using ftp, http[s] or file.</p><a id="more"></a><p>2020-11-30开始CentOS 6已经不支持了！</p><p>如果<code>yum install</code>和<code>yum update</code>的时候出现以下的错误的话要考虑看是不是CentOS6版本不支持了的缘故.</p><p>error:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Loaded</span> <span class="selector-tag">plugins</span>: <span class="selector-tag">fastestmirror</span>, <span class="selector-tag">ovl</span></span><br><span class="line"><span class="selector-tag">Setting</span> <span class="selector-tag">up</span> <span class="selector-tag">Install</span> <span class="selector-tag">Process</span></span><br><span class="line"><span class="selector-tag">Error</span>: <span class="selector-tag">Cannot</span> <span class="selector-tag">retrieve</span> <span class="selector-tag">repository</span> <span class="selector-tag">metadata</span> (<span class="selector-tag">repomd</span><span class="selector-class">.xml</span>) <span class="selector-tag">for</span> <span class="selector-tag">repository</span>: <span class="selector-tag">base</span>. <span class="selector-tag">Please</span> <span class="selector-tag">verify</span> <span class="selector-tag">its</span> <span class="selector-tag">path</span> <span class="selector-tag">and</span> <span class="selector-tag">try</span> <span class="selector-tag">again</span></span><br><span class="line"><span class="selector-tag">YumRepo</span> <span class="selector-tag">Error</span>: <span class="selector-tag">All</span> <span class="selector-tag">mirror</span> <span class="selector-tag">URLs</span> <span class="selector-tag">are</span> <span class="selector-tag">not</span> <span class="selector-tag">using</span> <span class="selector-tag">ftp</span>, <span class="selector-tag">http</span><span class="selector-attr">[s]</span> <span class="selector-tag">or</span> <span class="selector-tag">file</span>.</span><br><span class="line">Eg. Invalid release/repo/arch combination/</span><br><span class="line">removing mirrorlist with no valid mirrors: /var/cache/yum/x86_64/6/base/mirrorlist.txt</span><br></pre></td></tr></table></figure><p>自己是因为docker的关系一直用着旧的image和container,所以一直没有发觉. 一旦清空重新<code>docker compose up</code>的时候就因为CentOS6的关系当掉了.</p><p>解决方法是搜索最新所支持的包的url并替换掉…<br>或者将docker file里的CentOS版本更新.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CentOS6 Error: All mirror URLs are not using ftp, http[s] or file.&lt;/p&gt;
    
    </summary>
    
      <category term="Back-end Knowledge" scheme="https://kisky3.github.io/categories/Back-end-Knowledge/"/>
    
    
      <category term="CentOS6" scheme="https://kisky3.github.io/tags/CentOS6/"/>
    
  </entry>
  
  <entry>
    <title>Basic Operations on DynamoDB Tables by node.js</title>
    <link href="https://kisky3.github.io/2021/02/08/Node-js%E3%81%A7DynamoDB%E3%81%AE%E6%93%8D%E4%BD%9C/"/>
    <id>https://kisky3.github.io/2021/02/08/Node-jsでDynamoDBの操作/</id>
    <published>2021-02-07T15:04:54.000Z</published>
    <updated>2021-05-13T14:59:16.290Z</updated>
    
    <content type="html"><![CDATA[<p>用node.js对DynamoDB进行的基本操作</p><a id="more"></a><p>用js对DynamoDB进行数据操作的话有两种方法,<br>一种是使用AWS.DynamoDB,另一种是使用AWS.DynamoDB.DocumentClient(docClient)</p><p>例：AWS.DynamoDB</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dynamodb = <span class="keyword">new</span> AWS.DynamoDB();</span><br><span class="line"><span class="keyword">var</span> params = &#123;</span><br><span class="line">    TableName: <span class="string">'DogTable'</span>,</span><br><span class="line">    Item:&#123;</span><br><span class="line">        <span class="string">'dogId'</span>:&#123;<span class="attr">N</span>: <span class="string">'12'</span>&#125;, <span class="comment">// 数字的情况下需要指定N</span></span><br><span class="line">        <span class="string">'name'</span>:&#123;<span class="attr">S</span>: <span class="string">'项羽'</span>&#125; <span class="comment">// 字符串的情况下要指定S</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">dynamodb.putItem(params, callback);</span><br></pre></td></tr></table></figure><p>例：AWS.DynamoDB.DocumentClient</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> docClient = <span class="keyword">new</span> AWS.DynamoDB.DocumentClient();</span><br><span class="line"><span class="keyword">var</span> params = &#123;</span><br><span class="line">    TableName: <span class="string">'DogTable'</span>,</span><br><span class="line">    Item:&#123;</span><br><span class="line">         dogId: <span class="number">12</span>,</span><br><span class="line">         name: <span class="string">'项羽'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">docClient.put(params, callback);</span><br></pre></td></tr></table></figure><p>使用docClient的话,能够直接把原生的js代码转换成DynamoDB上的数据类型,代码相对简洁。<br>因此在此只讨论docClient的情况。</p><hr><h3 id="PUT-插入数据"><a href="#PUT-插入数据" class="headerlink" title="PUT (插入数据)"></a>PUT (插入数据)</h3><p>往SuperCarTable表里的主键(carId)里插入12这个项目。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> params = &#123;</span><br><span class="line">    TableName: <span class="string">'SuperCarTable'</span>,</span><br><span class="line">    Item:&#123;                               <span class="comment">// 主键是必须的（如果有排序键的话写上排序键）</span></span><br><span class="line">         carId: <span class="number">12</span>,                      <span class="comment">// 主键</span></span><br><span class="line">         name: <span class="string">'フェラーリ458'</span>,</span><br><span class="line">         price: <span class="number">28300000</span>,</span><br><span class="line">         engine: &#123;</span><br><span class="line">             type: <span class="string">'V型8気筒'</span>,</span><br><span class="line">             power: <span class="number">578</span></span><br><span class="line">         &#125;,</span><br><span class="line">         color:[<span class="string">'red'</span>, <span class="string">'black'</span>, <span class="string">'white'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">docClient.put(params, callback);</span><br></pre></td></tr></table></figure><hr><h3 id="GET（获取数据）"><a href="#GET（获取数据）" class="headerlink" title="GET（获取数据）"></a>GET（获取数据）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> params = &#123;</span><br><span class="line">    TableName: <span class="string">'SuperCarTable'</span>,</span><br><span class="line">    Key:&#123; <span class="comment">// 指定你想取得数据的主键(或者排序键)</span></span><br><span class="line">         carId: <span class="number">12</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">docClient.get(params, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data.Item.name);       <span class="comment">//'宝马458'</span></span><br><span class="line">        <span class="built_in">console</span>.log(data.Item.engine.type);<span class="comment">//'V型8号引擎'</span></span><br><span class="line">        <span class="built_in">console</span>.log(data.Item.color[<span class="number">2</span>]);   <span class="comment">//'白色'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h3 id="UPDATE-更新"><a href="#UPDATE-更新" class="headerlink" title="UPDATE(更新)"></a>UPDATE(更新)</h3><p>更新SuperCarTable表里主键(carId)为12的数据的其他属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> params = &#123;</span><br><span class="line">    TableName: <span class="string">'SuperCarTable'</span>,</span><br><span class="line">    Key:&#123;  <span class="comment">// 指定你想取得数据的主键(或者排序键)</span></span><br><span class="line">         carId: <span class="number">12</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 指定UpdateExpression的更新名</span></span><br><span class="line">    ExpressionAttributeNames: &#123;</span><br><span class="line">        <span class="string">'#n'</span>: <span class="string">'name'</span>,</span><br><span class="line">        <span class="string">'#d'</span>: <span class="string">'designer'</span></span><br><span class="line">        <span class="string">'#e'</span>: <span class="string">'engine'</span>,</span><br><span class="line">        <span class="string">'#t'</span>: <span class="string">'type'</span>,</span><br><span class="line">        <span class="string">'#p'</span>: <span class="string">'power'</span>,</span><br><span class="line">        <span class="string">'#c'</span>: <span class="string">'color'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 更新各属性的值</span></span><br><span class="line">    ExpressionAttributeValues: &#123;</span><br><span class="line">        <span class="string">':newName'</span>: <span class="string">'フェラーリ488GTB'</span>,</span><br><span class="line">        <span class="string">':newdesigner'</span>: <span class="string">'フラビオ・マンツォーニ'</span>,</span><br><span class="line">        <span class="string">':newType'</span>: <span class="string">'V型8気筒ツインターボ'</span>,</span><br><span class="line">        <span class="string">':addPower'</span>: <span class="number">92</span>,</span><br><span class="line">        <span class="string">':newColor'</span>: [<span class="string">'yellow'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    UpdateExpression: <span class="string">'SET #n = :newName, #d = :newDesigner, #e.#t = :newType, #e.#p = #e.#p + :addPower, #c = list_append(#c, :addPower)'</span></span><br><span class="line">&#125;;</span><br><span class="line">docClient.update(params, callback);</span><br></pre></td></tr></table></figure><h4 id="关于UpdateExpression"><a href="#关于UpdateExpression" class="headerlink" title="关于UpdateExpression"></a>关于UpdateExpression</h4><p>UpdateExpression是根据定义好的String的定义式来指定更新内容的。<br>必须要在UpdateExpression的最开始使用指定的action keyword,用逗号隔开的话可以同时执行多个指令。但是每个指定只能在一个UpdateExpression里使用一次。</p><p>例:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UpdateExpression: <span class="string">'SET #a = :aval, #b = :bval REMOVE #c'</span></span><br></pre></td></tr></table></figure><h4 id="SET-ACTION"><a href="#SET-ACTION" class="headerlink" title="SET ACTION:"></a>SET ACTION:</h4><p>用于属性的追加和加工。比如对数值进行处理后追加,还可以在数列里添加数据。(数列时要使用[]将数据框起来)</p><h4 id="REMOVE-ACTION"><a href="#REMOVE-ACTION" class="headerlink" title="REMOVE ACTION:"></a>REMOVE ACTION:</h4><p>删除指定项目的指定属性, 也可以只删除指定数列内的数据。</p><p>例:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ExpressionAttributeNames:&#123;</span><br><span class="line">    <span class="string">'#pr'</span>: <span class="string">'price'</span>,</span><br><span class="line">    <span class="string">'#c'</span>: <span class="string">'color'</span></span><br><span class="line">&#125;</span><br><span class="line">UpdateExpression: <span class="string">'REMOVE #pr, #c[1]'</span> <span class="comment">// 删除price属性和color数列的第二个值</span></span><br></pre></td></tr></table></figure><hr><h4 id="ADD-ACTION"><a href="#ADD-ACTION" class="headerlink" title="ADD ACTION:"></a>ADD ACTION:</h4><p>用于数值属性的加法处理,追加SET类型的值。(推荐用SET ACTION进行代替)<br>另外,SET类型是原生Javascirpt不存在的类型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ExpressionAttributeNames:&#123;</span><br><span class="line">    <span class="string">'#pr'</span>: <span class="string">'price'</span>,</span><br><span class="line">    <span class="string">'#c'</span>: <span class="string">'color'</span><span class="comment">// color属性为String Set型</span></span><br><span class="line">&#125;,</span><br><span class="line">ExpressionAttributeValues:&#123;</span><br><span class="line">    <span class="string">':addPrice'</span>: <span class="number">7400000</span>,  <span class="comment">// 为price属性加上7400000</span></span><br><span class="line">    <span class="string">':addColor'</span>: docClient.createSet([<span class="string">'Yellow'</span>, <span class="string">'Gray'</span>]) <span class="comment">// 为color属性添加Yellow和Gray的值</span></span><br><span class="line">&#125;,</span><br><span class="line">UpdateExpression: <span class="string">'ADD #pr :addPrice, #c :addColor'</span></span><br></pre></td></tr></table></figure><hr><h4 id="DELETE-ACTION"><a href="#DELETE-ACTION" class="headerlink" title="DELETE ACTION:"></a>DELETE ACTION:</h4><p>可以从SET型的属性删除指定的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ExpressionAttributeNames:&#123;</span><br><span class="line">    <span class="string">'#c'</span>: <span class="string">'color'</span> <span class="comment">// color属性为String Set型</span></span><br><span class="line">&#125;,</span><br><span class="line">ExpressionAttributeValues:&#123;</span><br><span class="line">    <span class="string">':deleteColor'</span>: docClient.createSet([<span class="string">'Red'</span>, <span class="string">'Blue'</span>])  <span class="comment">// 从color属性删除Red和Blue的值</span></span><br><span class="line">&#125;,</span><br><span class="line">UpdateExpression: <span class="string">'DELETE #pr :deletePrice'</span></span><br></pre></td></tr></table></figure><p>如果是删除指定的一列数据的话,可以直接使用delete。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> params = &#123;</span><br><span class="line">    TableName: <span class="string">'SuperCarTable'</span>,</span><br><span class="line">    Key:&#123;   <span class="comment">// 指定想删除项目的主键(或排序键)</span></span><br><span class="line">         carId: <span class="number">12</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">docClient.delete(params, callback);</span><br></pre></td></tr></table></figure><hr><h4 id="QUERY-检索-和SCAN-取得所有"><a href="#QUERY-检索-和SCAN-取得所有" class="headerlink" title="QUERY(检索)和SCAN(取得所有)"></a>QUERY(检索)和SCAN(取得所有)</h4><p>QUERY:<br>基本情况下,表的主键和排序键(或者两者同时)的情况下才能进行query。<br>但是如果使用了<em>GSI</em>的情况下,也可以利用其他的属性来进行检索。</p><p>GSI:</p><table><thead><tr><th>name(pk)</th><th>year(sk)</th><th>category</th><th>nation</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td></tr></tbody></table><p>例:</p><h4 id="对1980年前获奖的获奖者进行query。"><a href="#对1980年前获奖的获奖者进行query。" class="headerlink" title="对1980年前获奖的获奖者进行query。"></a>对1980年前获奖的获奖者进行query。</h4><p>这时query的对象是sort key,所以直接可以进行query</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> params = &#123;</span><br><span class="line">    TableName: <span class="string">'NovelPrizeTable'</span>,</span><br><span class="line">    ExpressionAttributeNames:&#123;<span class="string">'#y'</span>: <span class="string">'year'</span>&#125;,</span><br><span class="line">    ExpressionAttributeValues:&#123;<span class="string">':val'</span>: <span class="number">1980</span>&#125;,</span><br><span class="line">    KeyConditionExpression: <span class="string">'#y &lt;= :val'</span><span class="comment">//検索対象が満たすべき条件を指定</span></span><br><span class="line">&#125;;</span><br><span class="line">docClient.query(params, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">       data.Items.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">person, index</span>)</span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(person.name);<span class="comment">//1980年以前の受賞者の名前</span></span><br><span class="line">       &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h4 id="对获得经济学奖的获奖人进行query"><a href="#对获得经济学奖的获奖人进行query" class="headerlink" title="对获得经济学奖的获奖人进行query"></a>对获得经济学奖的获奖人进行query</h4><p>这时进行query的对象是category。所以要设置一个将category作为主键的GSI(Global secondary index)</p><ol><li>打开DynamoDB的控制台里的index tab.</li><li>生成index</li><li>主键里输入「category」,将数据类型选择为字符串.</li><li>sort key 可以不用填写.</li><li>index名可以设置为「category-index」</li><li>点击生成index.</li></ol><p>代码如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> params = &#123;</span><br><span class="line">    TableName: <span class="string">'NovelPrizeTable'</span>,</span><br><span class="line">    IndexName: <span class="string">'category-index'</span>,<span class="comment">//インデックス名を指定</span></span><br><span class="line">    ExpressionAttributeNames:&#123;<span class="string">'#c'</span>: <span class="string">'category'</span>&#125;,</span><br><span class="line">    ExpressionAttributeValues:&#123;<span class="string">':val'</span>: <span class="string">'economics'</span>&#125;,</span><br><span class="line">    KeyConditionExpression: <span class="string">'#c = :val'</span><span class="comment">//検索対象が満たすべき条件を指定</span></span><br><span class="line">&#125;;</span><br><span class="line">docClient.query(params, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">       data.Items.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">person, index</span>)</span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(person.name);<span class="comment">//経済学賞受賞者の名前</span></span><br><span class="line">       &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h3 id="GSI-query的时候对IAM-Role的设置"><a href="#GSI-query的时候对IAM-Role的设置" class="headerlink" title="GSI query的时候对IAM Role的设置"></a>GSI query的时候对IAM Role的设置</h3><p>为了获得对<code>NovelPrizeTable</code>的操作权限, <code>NovelPrizeTable</code>的ARN操作时要分配到可以拥有操作权限的IAMRole.<br>但是NovelPrizeTable的GSI进行query的时候，必须要追加对当前的GSI的ARN的操作权限的Resource.<br>这时IAM Role的设置如下(表名字的后面添加/index(index名))</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"Version"</span>: <span class="string">"2012-10-17"</span>,</span><br><span class="line">    <span class="string">"Statement"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"Effect"</span>: <span class="string">"Allow"</span>,</span><br><span class="line">            <span class="string">"Action"</span>: [</span><br><span class="line">                <span class="string">"dynamodb:Query"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">"Resource"</span>: [</span><br><span class="line">                <span class="string">"arn:aws:dynamodb:ap-northeast-1:********:table/NovelPrizeTable"</span>,</span><br><span class="line">                <span class="string">"arn:aws:dynamodb:ap-northeast-1:********:table/NovelPrizeTable/index/category-index"</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用node.js对DynamoDB进行的基本操作&lt;/p&gt;
    
    </summary>
    
    
      <category term="AWS" scheme="https://kisky3.github.io/tags/AWS/"/>
    
      <category term="DynamoDB" scheme="https://kisky3.github.io/tags/DynamoDB/"/>
    
      <category term="Node.js" scheme="https://kisky3.github.io/tags/Node-js/"/>
    
      <category term="DocumentClient" scheme="https://kisky3.github.io/tags/DocumentClient/"/>
    
  </entry>
  
  <entry>
    <title>How To Design Your Github Page</title>
    <link href="https://kisky3.github.io/2021/02/06/HowToDesignYourGithubPage/"/>
    <id>https://kisky3.github.io/2021/02/06/HowToDesignYourGithubPage/</id>
    <published>2021-02-06T10:37:26.000Z</published>
    <updated>2021-05-13T14:58:54.847Z</updated>
    
    <content type="html"><![CDATA[<p>如何美化设计你的Github主页</p><a id="more"></a><h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p>看见别人的 Github 和平常不太一样，通过搜索才知道可以通过建立和用户名相同的仓库展示到主页，丰富主页。</p><h3 id="开始动手"><a href="#开始动手" class="headerlink" title="开始动手"></a>开始动手</h3><ol><li>创建与 GitHub 账户同名的仓库，并勾选 README<img src="./1.png" style="width: 500px"></li></ol><p>从上图可以看到提示：</p><blockquote><p>You found a secret! Kisky3/Kisky3 is a ✨special ✨ repository that you can use to add a README.md to your GitHub profile. Make sure it’s public and initialize it with a README to get started.</p></blockquote><p>创建成功后返回主页查看效果,到此你会不会好奇这是怎样实现的，不妨我们查看下此仓库中唯一的README.md文件。</p><p>细心的你可以发现主页展示的内容就是此文件中的内容，并且 Github 官方也调皮的为你隐藏了提示。</p><h3 id="美化主页"><a href="#美化主页" class="headerlink" title="美化主页"></a>美化主页</h3><p>美化的思路就是通过改变与 GitHub 账户同名的仓库中的README.md文件，在主页展示不同的效果。</p><ol><li>引入GitHub 统计卡片</li></ol><p>项目地址：<a href="https://github.com/anuraghazra/" target="_blank" rel="noopener">https://github.com/anuraghazra/</a><br>readme 文件中已有详细的使用说明</p><p>更多效果，这就和编写网页一样，后面请尽情发挥。。。</p><p>最终效果如下：<br><img src="./2.png" style="width: 500px"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如何美化设计你的Github主页&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="Github" scheme="https://kisky3.github.io/tags/Github/"/>
    
      <category term="Theme" scheme="https://kisky3.github.io/tags/Theme/"/>
    
  </entry>
  
  <entry>
    <title>How to use var_dump and print_r into Cakephp</title>
    <link href="https://kisky3.github.io/2021/02/05/AboutCakephp/"/>
    <id>https://kisky3.github.io/2021/02/05/AboutCakephp/</id>
    <published>2021-02-05T01:14:41.000Z</published>
    <updated>2021-05-13T14:53:27.758Z</updated>
    
    <content type="html"><![CDATA[<p>如何在Cakephp里使用var_dump和print_r</p><a id="more"></a><h3 id="var-dump"><a href="#var-dump" class="headerlink" title="var_dump"></a>var_dump</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var_dump(参数)</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot; /&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;?php</span><br><span class="line">      $data = 70;</span><br><span class="line">      var_dump($data);</span><br><span class="line">    ?&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>结果：<br><img src="./1.png" style="width: 500px"></p><p>字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot; /&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;?php</span><br><span class="line">      $data = &quot;abcde&quot;;</span><br><span class="line">      var_dump($data);</span><br><span class="line">    ?&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>结果：<br><img src="./2.png" style="width: 500px"></p><p>数列：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot; /&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;?php</span><br><span class="line">      $data = array(&quot;one&quot;,2,3,&quot;four&quot;);</span><br><span class="line">      var_dump($data);</span><br><span class="line">    ?&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><img src="./3.png" style="width: 500px"><h1 id="与print-r的不同"><a href="#与print-r的不同" class="headerlink" title="与print_r的不同"></a>与print_r的不同</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot; /&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;?php</span><br><span class="line">      $data = array(&quot;one&quot;,2,3,&quot;four&quot;);</span><br><span class="line">      var_dump($data);</span><br><span class="line">      echo &quot;&lt;br /&gt;&quot;;</span><br><span class="line">      print_r ($data);</span><br><span class="line">    ?&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><img src="./4.png" style="width: 500px">第一行为var_dump的输出内容、第二行为print_r的输出内容。print_r一般只打印内容。<hr><p>当是写在view(tpl)里面的时候，可以用下面的写法直接在view里显示数列的内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;$array|@debug_print_var&#125;</span><br><span class="line">&#123;$array|@print_r&#125;</span><br><span class="line">&#123;$array|@var_dump&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如何在Cakephp里使用var_dump和print_r&lt;/p&gt;
    
    </summary>
    
      <category term="Back-end Knowledge" scheme="https://kisky3.github.io/categories/Back-end-Knowledge/"/>
    
    
      <category term="php" scheme="https://kisky3.github.io/tags/php/"/>
    
      <category term="cakephp" scheme="https://kisky3.github.io/tags/cakephp/"/>
    
  </entry>
  
  <entry>
    <title>Git Pull Error【Please commit your changes or stash them before you merge】</title>
    <link href="https://kisky3.github.io/2021/01/08/gitpullerror/"/>
    <id>https://kisky3.github.io/2021/01/08/gitpullerror/</id>
    <published>2021-01-08T06:06:03.000Z</published>
    <updated>2021-05-13T14:53:29.597Z</updated>
    
    <content type="html"><![CDATA[<p>Git pull 时的错误【Please commit your changes or stash them before you merge】</p><a id="more"></a><p>当<code>git pull origin master</code>当时候发生以下的错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git pull origin master</span><br><span class="line">From https://github.com/user-name/app-name</span><br><span class="line">     * branch　     master       -&gt;   FETCH_HEAD</span><br><span class="line">Updating e05c05f..050505</span><br><span class="line">error: Your local changes to the following files would be overwritten by merge: </span><br><span class="line">         Gemfile.lock</span><br><span class="line">         config/initializers/devise.rb</span><br><span class="line">Please commit your changes or stash them before you merge.</span><br><span class="line">Aborting</span><br><span class="line">$</span><br></pre></td></tr></table></figure><h3 id="解决方法1-删除文件"><a href="#解决方法1-删除文件" class="headerlink" title="解决方法1: 删除文件"></a>解决方法1: 删除文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># ファイルのあるディレクトリへ移動</span><br><span class="line">$ rm Gemfile.lock</span><br><span class="line">$ git pull origin master</span><br></pre></td></tr></table></figure><hr><h3 id="解决方法2-stash回避"><a href="#解决方法2-stash回避" class="headerlink" title="解决方法2: stash回避"></a>解决方法2: stash回避</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 1) コンフり起こしてるファイルを一時退避</span><br><span class="line">$ git stash</span><br><span class="line"># 2) 退避したコミットしていないものが表示されるのでpullする</span><br><span class="line">$ git pull origin master</span><br><span class="line"># 3) スタッシュを戻す</span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure><hr><h3 id="解决方法3-强制push"><a href="#解决方法3-强制push" class="headerlink" title="解决方法3: 强制push"></a>解决方法3: 强制push</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 1) リモートの最新を取ってきておいて・・</span><br><span class="line">$ git fetch origin master</span><br><span class="line"></span><br><span class="line"># 2) masterを、リモート追跡のmasterに強制的に合わせる</span><br><span class="line">$ git reset --hard origin/master</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Git pull 时的错误【Please commit your changes or stash them before you merge】&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="GitErrors" scheme="https://kisky3.github.io/tags/GitErrors/"/>
    
  </entry>
  
  <entry>
    <title>AWS CLF Lesson1〜3 Memo</title>
    <link href="https://kisky3.github.io/2021/01/05/lesson1/"/>
    <id>https://kisky3.github.io/2021/01/05/lesson1/</id>
    <published>2021-01-05T13:06:40.000Z</published>
    <updated>2021-05-13T14:57:33.358Z</updated>
    
    <content type="html"><![CDATA[<p>AWS 云从业者基础知识 学习笔记1 〜 3</p><a id="more"></a><p>AWSクラウドコンピューティングの６つのメリットは試験に出る内容：<br>1.固定費(設備投資費)が柔軟な変動費へ<br>2.スケールによる大きなコストメリット<br>3.キャパシティ予測が不要に<br>4.速度と俊敏性の向上<br>5.データセンターの運用と捕手への投資が不要に<br>6.わずか数分で世界中にデプロイ</p><p>時間が経てば故障する、ということを認識し、この考えをアーキテクチャに採り入れます。<br>このような考え方を<code>Design for Failure</code>といいます。</p><p>単一障害点(Single Point Of Failure、SPOF)という考え方があります。</p><p>Design for Failure = 単一障害点をなくそう<br>マネージドなサービスを利用すよう。AWSのマネージドなサービスは単一障害点にならないように考慮されている。</p><ul><li>1つのデータセンターのみ運用しない</li><li>単一のインスタンスのみ構成しない</li></ul><p>固定されたリソースでなく、クラウドの利点である弾力性を使って動的的にスケーリングを行う。<br>使い捨て可能なリソースとして、サーバーを考える。</p><p>ロードバランサーを組み合わせて、並列処理を行う。<br>スケーリングは弾力性を組み合わせて、高負荷時にはスケールアウト、低負荷時にはスケールインを行う。</p><p>静的コンテンツは外部に出して、エンドユーザーの近くに保管する。<br>動的に処理するデータは、クラウド上のコンピューティングリソースの近くに保管する。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;AWS 云从业者基础知识 学习笔记1 〜 3&lt;/p&gt;
    
    </summary>
    
    
      <category term="aws" scheme="https://kisky3.github.io/tags/aws/"/>
    
      <category term="AWS Certified Cloud Practitioner" scheme="https://kisky3.github.io/tags/AWS-Certified-Cloud-Practitioner/"/>
    
  </entry>
  
  <entry>
    <title>Managing State in Vue with Vuex</title>
    <link href="https://kisky3.github.io/2021/01/05/VueAndVuex/"/>
    <id>https://kisky3.github.io/2021/01/05/VueAndVuex/</id>
    <published>2021-01-05T12:24:50.000Z</published>
    <updated>2021-05-13T14:57:08.816Z</updated>
    
    <content type="html"><![CDATA[<p>如何使用Vuex管理Vue的状态</p><a id="more"></a><p>Vue和Vuex的连接方法想要总结一下:<br>一般来说Vue和Vuex都存在一下基础文件,</p><p>首先是store</p><p>stores/index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  familyName: <span class="string">''</span>,</span><br><span class="line">  givenName: <span class="string">''</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  setFamilyName (state, val) &#123;</span><br><span class="line">    state.familyName = val</span><br><span class="line">  &#125;,</span><br><span class="line">  setGivenName (state, val) &#123;</span><br><span class="line">    state.givenName = val</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">  fullName: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;state.familyName&#125;</span><span class="subst">$&#123;state.givenName&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">  getters,</span><br><span class="line">  actions,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><h2 id="如何从Vue向Vuex传值"><a href="#如何从Vue向Vuex传值" class="headerlink" title="如何从Vue向Vuex传值"></a>如何从Vue向Vuex传值</h2><h4 id="方法1-使用Vue-js的监视属性-watched-propery"><a href="#方法1-使用Vue-js的监视属性-watched-propery" class="headerlink" title="方法1.使用Vue.js的监视属性(watched propery)"></a>方法1.使用Vue.js的监视属性(watched propery)</h4><p>如果使用watch的话，想通过别的值来改变目标值的时候，就不太灵活了。所以其实不是很推荐。</p><p>template</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"text"</span> name=<span class="string">"familyName"</span> v-model=<span class="string">"familyName"</span>&gt;</span><br></pre></td></tr></table></figure><p>app.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./stores'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">"#app"</span>,</span><br><span class="line">  state: &#123;</span><br><span class="line">    familyName: <span class="string">''</span>,</span><br><span class="line">    givenName: <span class="string">''</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    familyName (val) &#123;</span><br><span class="line">     <span class="comment">// 直接通过这里向store里保存获取的新值</span></span><br><span class="line">      store.commit(<span class="string">'setFamilyName'</span>, val)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="方法2-通过事件传递值，并在Vue的方法里commit"><a href="#方法2-通过事件传递值，并在Vue的方法里commit" class="headerlink" title="方法2: 通过事件传递值，并在Vue的方法里commit"></a>方法2: 通过事件传递值，并在Vue的方法里commit</h3><p>首先还是一样的template</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"text"</span> name=<span class="string">"familyName"</span> @input=<span class="string">"setFamilyName"</span>&gt;</span><br></pre></td></tr></table></figure><p>app.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./stores'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">"#app"</span>,</span><br><span class="line">  state: &#123;&#125;,</span><br><span class="line">  watch: &#123;&#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    setFamilyName (e) &#123;</span><br><span class="line">      store.commit(<span class="string">'setFamilyName'</span>, e.target.value)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><h4 id="方法4-通过事件传递，通过store的action进行commit"><a href="#方法4-通过事件传递，通过store的action进行commit" class="headerlink" title="方法4: 通过事件传递，通过store的action进行commit"></a>方法4: 通过事件传递，通过store的action进行commit</h4><p>首先是Vue的template, 这里给方法指定参数的话有多种方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"text"</span> name=<span class="string">"familyName"</span> @input=<span class="string">"updateFamilyName"</span>&gt;</span><br><span class="line">&lt;!-- or --&gt;</span><br><span class="line">&lt;input type=<span class="string">"text"</span> name=<span class="string">"familyName"</span> @input=<span class="string">"updateFamilyName($event.target.value)"</span>&gt;</span><br></pre></td></tr></table></figure><p>app.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">import</span> &#123; mapActions &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./stores'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">"#app"</span>,</span><br><span class="line">  store, <span class="comment">// mapActionsを使う場合は、Vueにstoreを追加する必要がある。</span></span><br><span class="line">  state: &#123;&#125;,</span><br><span class="line">  watch: &#123;&#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    ...mapActions([</span><br><span class="line">      <span class="string">'updateFamilyName'</span>,</span><br><span class="line">    ]),</span><br><span class="line">    <span class="comment">// 不使用mapActions的情况下</span></span><br><span class="line">    <span class="comment">// Vue里不指定参数的情况下</span></span><br><span class="line">    <span class="comment">// setFamilyName (event) &#123;</span></span><br><span class="line">    <span class="comment">//   store.commit('setFamilyName', event.target.value)</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    <span class="comment">// Vue里指定参数为$event.target.value的情况下</span></span><br><span class="line">    <span class="comment">// setFamilyName (value) &#123;</span></span><br><span class="line">    <span class="comment">//   store.commit('setFamilyName', value)</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// 不使用mapActions,通过actions途径进行保存的情况下</span></span><br><span class="line">    <span class="comment">// updateFamilyName (e) &#123;</span></span><br><span class="line">    <span class="comment">//   store.dispatch('updateFamilyName', e)</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>stores/index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  updateFamilyName(&#123; commit, state &#125;, e) &#123;</span><br><span class="line">    <span class="comment">// vue里不指定参数的情况下，将event作为第二参数引入</span></span><br><span class="line">    commit(<span class="string">'setFamilyName'</span>, e.target.value)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 或者</span></span><br><span class="line">  <span class="comment">// setFamilyName(&#123; commit, state &#125;, value) &#123;</span></span><br><span class="line">  <span class="comment">//   commit('setFamilyName', value)</span></span><br><span class="line">  <span class="comment">// &#125;,</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="方法4：使用get和set进行双向绑定"><a href="#方法4：使用get和set进行双向绑定" class="headerlink" title="方法4：使用get和set进行双向绑定"></a>方法4：使用get和set进行双向绑定</h4><p><a href="https://vuex.vuejs.org/ja/guide/forms.html#%E5%8F%8C%E6%96%B9%E5%90%91%E7%AE%97%E5%87%BA%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3" target="_blank" rel="noopener">参考Vue公式</a></p><p>vue里使用v-model并在Vue.js的computed属性里定义set。<br>最好顺便定义好get,如果没有定义好get的情况下,mapState有可能会无法正常工作。<br>不想使用watched property进行监视并对store里的值进行更新的情况下v-model就显得很方便了。</p><p>首先还是template</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"text"</span> name=<span class="string">"familyName"</span> v-model=<span class="string">"familyName"</span>&gt;</span><br></pre></td></tr></table></figure><p>app.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./stores'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">"#app"</span>,</span><br><span class="line">  state: &#123;&#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    familyName: &#123;</span><br><span class="line">      <span class="keyword">get</span> () &#123; <span class="keyword">return</span> store.state.familyName &#125;,</span><br><span class="line">      <span class="keyword">set</span> (val) &#123; store.commit(<span class="string">'setFamilyName'</span>, val) &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><h3 id="究竟那种方法更好？"><a href="#究竟那种方法更好？" class="headerlink" title="究竟那种方法更好？"></a>究竟那种方法更好？</h3><p>在vue的官方公式网站上说state应该是由action通过mutaion来进行改变。<br>而不是在Vue的methods里进行store.commit。<br>但是在Vue的初级入门的例子里其实是存在通过methods来commit的。<br>所以按情况来说,直接通过action来改变state的状态也不是不可以/</p><p>在非同期的处理的时候, 可以直接通过action进行commit,<br>但是只是对store的情况下，可以考虑直接从Vue里commit。</p><hr><h2 id="如何从Vuex向Vue传值"><a href="#如何从Vuex向Vue传值" class="headerlink" title="如何从Vuex向Vue传值"></a>如何从Vuex向Vue传值</h2><h3 id="方法1-活用computed"><a href="#方法1-活用computed" class="headerlink" title="方法1: 活用computed"></a>方法1: 活用computed</h3><p>app.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./stores'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">"#app"</span>,</span><br><span class="line">  ・・・（略）・・・</span><br><span class="line">  computed: &#123;</span><br><span class="line">    familyName() &#123;</span><br><span class="line">      <span class="keyword">return</span> store.state.familyName</span><br><span class="line">    &#125;,</span><br><span class="line">    givenName() &#123;</span><br><span class="line">      <span class="keyword">return</span> store.state.givenName</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 想引用不同的方法名的时候</span></span><br><span class="line">    firstName () &#123;</span><br><span class="line">      <span class="keyword">return</span> store.state.givenName</span><br><span class="line">    &#125;,</span><br><span class="line">    fullName () &#123;</span><br><span class="line">      <span class="keyword">return</span> store.getters.fullName</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">  ・・・（略）・・・</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="方法2-使用mapState和mapGetters"><a href="#方法2-使用mapState和mapGetters" class="headerlink" title="方法2: 使用mapState和mapGetters"></a>方法2: 使用mapState和mapGetters</h3><p>通过数组的形式定义好store的key<br>app.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapState, mapGetters &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./stores'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">"#app"</span>,</span><br><span class="line">  store, <span class="comment">// 使用mapState和mapGetters的时候、要记得向Vue里追加store的声明。</span></span><br><span class="line">  ・・・（略）・・・</span><br><span class="line">  computed: &#123;</span><br><span class="line">    ...mapState([</span><br><span class="line">      <span class="string">'familyName'</span>,</span><br><span class="line">      <span class="string">'givenName'</span>,</span><br><span class="line">    ]),</span><br><span class="line">    <span class="comment">// 想引用不同的方法名的时候</span></span><br><span class="line">    ...mapState(&#123;</span><br><span class="line">      firstName: <span class="string">'givenName'</span></span><br><span class="line">    &#125;),</span><br><span class="line">    ...mapGetters([</span><br><span class="line">      <span class="string">'fullName'</span></span><br><span class="line">    ]),</span><br><span class="line">  &#125;</span><br><span class="line">  ・・・（略）・・・</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="方法3-在store里使用其他的getters"><a href="#方法3-在store里使用其他的getters" class="headerlink" title="方法3: 在store里使用其他的getters"></a>方法3: 在store里使用其他的getters</h3><p>比如<code>familyName</code>和<code>givenName</code>里不存在半角空格和不正确的字符的情况下显示kana,<br>首先在getters里定义好判断<code>familyName</code>和<code>givenName</code>是否为valid的方法，<br>两个条件同时满足的时候显示kana。</p><p>getters方法里如果第二参数是getters的话可以直接调用其他的getters里的方法。<br>stores/index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">  ・・・（略）・・・</span><br><span class="line">  isValidFamilyName: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">String</span>(state.familyName).trim() !== <span class="string">''</span></span><br><span class="line">  &#125;,</span><br><span class="line">  isValidGivenName: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">String</span>(state.givenName).trim() !== <span class="string">''</span></span><br><span class="line">  &#125;,</span><br><span class="line">  isVisibleKana: <span class="function">(<span class="params">state, getters</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getters.isValidFamilyName &amp;&amp; getters.isValidGivenName</span><br><span class="line">  &#125;,</span><br><span class="line">  ・・・（略）・・・</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h3><img src="./1.gif" style="width=60px"><p>familyName、givenName用的是方法4追加进store<br>familyNameKana、givenNameKana是用方法3。</p><p>index.html</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;title&gt;vuejs-vuex-simple-sample&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">"app"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure><p>main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  components: &#123;</span><br><span class="line">    App,</span><br><span class="line">  &#125;,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>App.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      名前：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"familyName"</span> <span class="attr">v-model</span>=<span class="string">"familyName"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"givenName"</span> <span class="attr">v-model</span>=<span class="string">"givenName"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>フルネーム：&#123;&#123; fullName &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>firstName：&#123;&#123; firstName &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">"isVisibleKana"</span>&gt;</span></span><br><span class="line">      ナマエ：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"familyNameKana"</span> @<span class="attr">input</span>=<span class="string">"updateFamilyNameKana"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"givenNameKana"</span> @<span class="attr">input</span>=<span class="string">"updateGivenNameKana"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">"isVisibleKana"</span>&gt;</span>フルネーム（カナ）：&#123;&#123; fullNameKana &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; mapState, mapGetters, mapActions &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./stores'</span></span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">'App'</span>,</span></span><br><span class="line">  store,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    familyName: &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">get</span> () &#123; <span class="keyword">return</span> store.state.familyName &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">set</span> (val) &#123; store.commit(<span class="string">'setFamilyName'</span>, val) &#125;,</span></span><br><span class="line">    &#125;,</span><br><span class="line">    givenName: &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">get</span> () &#123; <span class="keyword">return</span> store.state.givenName &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">set</span> (val) &#123; store.commit(<span class="string">'setGivenName'</span>, val) &#125;,</span></span><br><span class="line">    &#125;,</span><br><span class="line">    ...mapState(&#123;</span><br><span class="line"><span class="javascript">      firstName: <span class="string">'givenName'</span>,</span></span><br><span class="line">    &#125;),</span><br><span class="line">    ...mapGetters([</span><br><span class="line"><span class="javascript">      <span class="string">'fullName'</span>,</span></span><br><span class="line"><span class="javascript">      <span class="string">'isVisibleKana'</span>,</span></span><br><span class="line"><span class="javascript">      <span class="string">'fullNameKana'</span>,</span></span><br><span class="line">    ]),</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    ...mapActions([</span><br><span class="line"><span class="javascript">      <span class="string">'updateFamilyNameKana'</span>,</span></span><br><span class="line"><span class="javascript">      <span class="string">'updateGivenNameKana'</span>,</span></span><br><span class="line">    ]),</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>stores/index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  familyName: <span class="string">''</span>,</span><br><span class="line">  givenName: <span class="string">''</span>,</span><br><span class="line">  familyNameKana: <span class="string">''</span>,</span><br><span class="line">  givenNameKana: <span class="string">''</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  setFamilyName (state, val) &#123;</span><br><span class="line">    state.familyName = val</span><br><span class="line">  &#125;,</span><br><span class="line">  setGivenName (state, val) &#123;</span><br><span class="line">    state.givenName = val</span><br><span class="line">  &#125;,</span><br><span class="line">  setFamilyNameKana (state, val) &#123;</span><br><span class="line">    state.familyNameKana = val</span><br><span class="line">  &#125;,</span><br><span class="line">  setGivenNameKana (state, val) &#123;</span><br><span class="line">    state.givenNameKana = val</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">  fullName: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;state.familyName&#125;</span><span class="subst">$&#123;state.givenName&#125;</span>`</span></span><br><span class="line">  &#125;,</span><br><span class="line">  isValidFamilyName: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">String</span>(state.familyName).trim() !== <span class="string">''</span></span><br><span class="line">  &#125;,</span><br><span class="line">  isValidGivenName: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">String</span>(state.givenName).trim() !== <span class="string">''</span></span><br><span class="line">  &#125;,</span><br><span class="line">  isVisibleKana: <span class="function">(<span class="params">state, getters</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getters.isValidFamilyName &amp;&amp; getters.isValidGivenName</span><br><span class="line">  &#125;,</span><br><span class="line">  fullNameKana: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;state.familyNameKana&#125;</span><span class="subst">$&#123;state.givenNameKana&#125;</span>`</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  updateFamilyNameKana (&#123; commit, state &#125;, e) &#123;</span><br><span class="line">    commit(<span class="string">'setFamilyNameKana'</span>, e.target.value)</span><br><span class="line">  &#125;,</span><br><span class="line">  updateGivenNameKana (&#123; commit, state &#125;, e) &#123;</span><br><span class="line">    commit(<span class="string">'setGivenNameKana'</span>, e.target.value)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">  getters,</span><br><span class="line">  actions,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如何使用Vuex管理Vue的状态&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="Vue" scheme="https://kisky3.github.io/tags/Vue/"/>
    
      <category term="Vuex" scheme="https://kisky3.github.io/tags/Vuex/"/>
    
  </entry>
  
  <entry>
    <title>Typescript Error「Object is possibly null」</title>
    <link href="https://kisky3.github.io/2021/01/04/typescriptErrorObjectispossiblynull/"/>
    <id>https://kisky3.github.io/2021/01/04/typescriptErrorObjectispossiblynull/</id>
    <published>2021-01-03T15:03:57.000Z</published>
    <updated>2021-05-13T14:56:40.066Z</updated>
    
    <content type="html"><![CDATA[<p>typescript 提示 「Object is possibly null」的N种解决方法</p><a id="more"></a><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'.main-table'</span>).setAttribute(<span class="string">'height'</span>, <span class="string">'300px'</span>);</span><br></pre></td></tr></table></figure><p>如上，我要设置某元素的高度，但typescript提示 Object is possibly ‘null’，是因为可能不存在选择元素的情况。</p><h3 id="解决方案一"><a href="#解决方案一" class="headerlink" title="解决方案一"></a>解决方案一</h3><p>最正确的解决方案，就是加null的判断。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> table = <span class="built_in">document</span>.querySelector(<span class="string">'.main-table'</span>);</span><br><span class="line"><span class="keyword">if</span> (table) &#123;</span><br><span class="line">  table.setAttribute(<span class="string">'height'</span>, <span class="string">'300px'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="解决方案二"><a href="#解决方案二" class="headerlink" title="解决方案二"></a>解决方案二</h3><p>使用断言方式，当然这是你能保证元素必定存在的情况。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="built_in">document</span>.querySelector(<span class="string">'.main-table'</span>) <span class="keyword">as</span> Element).setAttribute(<span class="string">'height'</span>, <span class="string">'300px'</span>);</span><br></pre></td></tr></table></figure><hr><h3 id="解决方案三"><a href="#解决方案三" class="headerlink" title="解决方案三"></a>解决方案三</h3><p>这和解决方案原理一样，要判断null情况，但写法简单点，当然这是关闭eslint的情况下，否则eslint会提示错误。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'.main-table'</span>)?.setAttribute(<span class="string">'height'</span>, <span class="string">'300px'</span>);</span><br></pre></td></tr></table></figure><p>这里使用了 ?. 符号，相当于&amp;&amp;，意思是先判断?前面的对象是否存在，存在情况下再执行后面的方法；<br>使用下面代码也是可以的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> table = <span class="built_in">document</span>.querySelector(<span class="string">'.main-table'</span>;</span><br><span class="line">table &amp;&amp; table.setAttribute(<span class="string">'height'</span>, <span class="string">'300px'</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;typescript 提示 「Object is possibly null」的N种解决方法&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="Vue" scheme="https://kisky3.github.io/tags/Vue/"/>
    
      <category term="Typescript" scheme="https://kisky3.github.io/tags/Typescript/"/>
    
  </entry>
  
  <entry>
    <title>AWS Lambda Dynamodb Access Error AccessDeniedException</title>
    <link href="https://kisky3.github.io/2020/09/15/AWSLambdaAccessError/"/>
    <id>https://kisky3.github.io/2020/09/15/AWSLambdaAccessError/</id>
    <published>2020-09-15T14:55:41.000Z</published>
    <updated>2021-05-13T14:53:27.738Z</updated>
    
    <content type="html"><![CDATA[<p>AWS Lambda和Dynamodb连接时的错误 AccessDeniedException</p><a id="more"></a><p>当想在lambda里通过特定条件读取Dynamodb里的数据时，发生了以下的错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">2017-04-03T12:11:12.144Z    ******  Unable to delete item. Error JSON:</span><br><span class="line">&#123;</span><br><span class="line">    &quot;message&quot;: &quot;User: arn:aws:sts::******:assumed-role/******/****** is not authorized to perform: dynamodb:DeleteItem on resource: arn:aws:dynamodb:us-east-1:******:table/******&quot;,</span><br><span class="line">    &quot;code&quot;: &quot;AccessDeniedException&quot;,</span><br><span class="line">    &quot;time&quot;: &quot;2017-04-03T12:11:12.131Z&quot;,</span><br><span class="line">    &quot;requestId&quot;: &quot;******&quot;,</span><br><span class="line">    &quot;statusCode&quot;: 400,</span><br><span class="line">    &quot;retryable&quot;: false,</span><br><span class="line">    &quot;retryDelay&quot;: 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><p>lambda的policy里、添加可以允许Dynamodb连接的权限。</p><p>首先确认lambda的policy：<br><img src="./1.png" style="width: 500px"></p><hr><p>然后添加policy<br><img src="./2.png" style="width: 500px"></p><hr><p>这时候ARN这个修饰名是需要的，可以从dynamodb的overview里看到。<br><img src="./3.png" style="width: 500px"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;AWS Lambda和Dynamodb连接时的错误 AccessDeniedException&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="AWS" scheme="https://kisky3.github.io/tags/AWS/"/>
    
      <category term="Lambda" scheme="https://kisky3.github.io/tags/Lambda/"/>
    
  </entry>
  
  <entry>
    <title>iOS Input Input Expansion Probleam</title>
    <link href="https://kisky3.github.io/2020/09/14/iOSInputExpansion/"/>
    <id>https://kisky3.github.io/2020/09/14/iOSInputExpansion/</id>
    <published>2020-09-14T14:16:05.000Z</published>
    <updated>2021-05-13T14:53:29.626Z</updated>
    
    <content type="html"><![CDATA[<p>iOS下输入时画面的放大问题</p><a id="more"></a><h2 id="解决方法1-禁止页面缩放"><a href="#解决方法1-禁止页面缩放" class="headerlink" title="解决方法1: 禁止页面缩放"></a>解决方法1: 禁止页面缩放</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,</span></span></span><br><span class="line"><span class="tag"><span class="string">initial-scale=1.0, maximum-scale=1.0, user-scalable=no"</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- initial-scale     - 初始的缩放比例</span></span><br><span class="line"><span class="comment">   minimum-scale     - 允许用户缩放到的最小比例</span></span><br><span class="line"><span class="comment">   maximum-scale     - 允许用户缩放到的最大比例</span></span><br><span class="line"><span class="comment">   user-scalable     - 用户是否可以手动缩放 --&gt;</span></span><br></pre></td></tr></table></figure><p>但是这样会限制用户的手动放大。</p><hr><h2 id="解决方法2-input输入框中的字体不能小于16px"><a href="#解决方法2-input输入框中的字体不能小于16px" class="headerlink" title="解决方法2: input输入框中的字体不能小于16px"></a>解决方法2: input输入框中的字体不能小于16px</h2><p>例子：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=text]</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(0.8);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="解决方法3-调整行高"><a href="#解决方法3-调整行高" class="headerlink" title="解决方法3: 调整行高"></a>解决方法3: 调整行高</h2><p>调整input框的行高与字体font-size的行高，一般是<em>input框的行高&gt;=字体font-size的行高</em></p><hr><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/weixin_40890907/article/details/82378873?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2.control" target="_blank" rel="noopener">ios中点击input输入框光标变大，页面放大问题</a></p><p><a href="https://qiita.com/skwbr/items/b285cc312587c73a4812" target="_blank" rel="noopener">iOSでinputのフォーカス時に画面がズームするのを防ぐ</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;iOS下输入时画面的放大问题&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="Input" scheme="https://kisky3.github.io/tags/Input/"/>
    
      <category term="iOS" scheme="https://kisky3.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Vue TypeError:「Cannot read property ..... of undefined&quot;」</title>
    <link href="https://kisky3.github.io/2020/09/12/VueUndefinedError/"/>
    <id>https://kisky3.github.io/2020/09/12/VueUndefinedError/</id>
    <published>2020-09-12T14:36:05.000Z</published>
    <updated>2021-05-13T14:53:29.388Z</updated>
    
    <content type="html"><![CDATA[<p>Vue类型错误：无法阅读未定义属性</p><a id="more"></a><p>当我想取得<em>data[index][“hoge”]</em>这样当数据的时候，vue出现了一下当报错。<br>(但是在console里打出来看看又发现是可以取到数据的)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cannot read property &apos;hoge&apos; of undefined</span><br></pre></td></tr></table></figure><p>理由是因为data[index]为undefined的时候无法取得下一级的元素，<br>在vue上加上一个v-if条件就可以了。</p><p>例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">"data[index]"</span>&gt;</span>&#123;&#123;data[index]["hoge"]&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Vue类型错误：无法阅读未定义属性&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="Vue" scheme="https://kisky3.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue iOS IME Input Probleam</title>
    <link href="https://kisky3.github.io/2020/08/14/VueInputIMEProbleam/"/>
    <id>https://kisky3.github.io/2020/08/14/VueInputIMEProbleam/</id>
    <published>2020-08-14T14:16:05.000Z</published>
    <updated>2021-05-13T14:53:29.380Z</updated>
    
    <content type="html"><![CDATA[<p>Vue Input 在iOS下的IME日语输入问题</p><a id="more"></a><h2 id="1-重复值的输入"><a href="#1-重复值的输入" class="headerlink" title="1.重复值的输入"></a>1.重复值的输入</h2><p>Vue的Input在网页输入时没啥问题 但是在iPhone的Sarari输入时会有输入值的重复输入</p><h5 id="理由"><a href="#理由" class="headerlink" title="理由"></a>理由</h5><p>重复输入的情况是因为使用了@input,导致数字还在输入过程中事件被触发导致多重重复输入。</p><h5 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h5><p>这个用@change,等到数字输入完毕之后再执行一次处理就可以了。</p><p>##2.日语输入时第一次输入时无法触发@change事件(input的type为number)</p><p>第一次输入日语的时候,default为null, 无论@change还是@input都无法将日语存储到state里。<br>如果需要监视输入值进行相关处理(Validation)之类的话,会出现bug。<br>但是奇怪的是一旦输入过一次数字之后,就不存在这个问题了。</p><h5 id="理由-1"><a href="#理由-1" class="headerlink" title="理由"></a>理由</h5><p>如果你用日语输入法IME输入日文的时候,vue的data是当作null处理的,而如果default是null的话,<br>则相当于没变化,@change事件是不被触发的。<br>但是数字的话是填入数字,相当于data被激活了,@change之后就是能够运行的。</p><h5 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h5><p>1.使用Element: compositionend Event</p><blockquote><p>compositionend イベントは、 IME などのテキスト編集システムが現在の編集セッションを完了またはキャンセルした時に発生します。</p></blockquote><p>也就是当你使用IME输入法的时候,输入时或者输入完成的时候这个事件将被触发。<br>所以可以考虑和@change一起配套使用。</p><img src="./1.gif" style="width: 300px"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">  <span class="attr">type</span>=<span class="string">"number"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:value</span>=<span class="string">"item"</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">change</span>=<span class="string">"createItem"</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">compositionend</span>=<span class="string">"createItem"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">name</span>=<span class="string">"item"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure><p>2.不要使用input[type=”number”]</p><p>如果使用<code>number</code>的话键盘的上下键可以触发数字的大小变动,而且不能自动识别iPhone和Android的数字键盘。<br>可以考虑使用下面的方法,type依然为text,但是<code>inputmode=&quot;numeric&quot;</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; inputmode=&quot;numeric&quot; pattern=&quot;\d*&quot;&gt;</span><br></pre></td></tr></table></figure><p>这样不仅保证日语输入时候触发@change事件,并且能在使用iPhone和Android的时候自动打开数字键盘。<br><img src="./2.jpg" style="width: 500px"><br>而且不需要同时使用@change和@compositionend两个事件,用户体验也是比较好的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Vue Input 在iOS下的IME日语输入问题&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="Vue" scheme="https://kisky3.github.io/tags/Vue/"/>
    
      <category term="Input" scheme="https://kisky3.github.io/tags/Input/"/>
    
      <category term="iOS" scheme="https://kisky3.github.io/tags/iOS/"/>
    
      <category term="IME" scheme="https://kisky3.github.io/tags/IME/"/>
    
  </entry>
  
  <entry>
    <title>Git Error 「fatal cannot lock ref ...」</title>
    <link href="https://kisky3.github.io/2020/08/05/giterrorfatal-cannotlockref/"/>
    <id>https://kisky3.github.io/2020/08/05/giterrorfatal-cannotlockref/</id>
    <published>2020-08-04T15:47:21.000Z</published>
    <updated>2021-05-13T14:53:29.597Z</updated>
    
    <content type="html"><![CDATA[<p>Git Error: 「fatal: cannot lock ref …」</p><a id="more"></a><h3 id="Error详情："><a href="#Error详情：" class="headerlink" title="Error详情："></a>Error详情：</h3><p>在Git新建branch的时候出现了error,如果在别人创建的<code>project/feature_name</code>下面创建了<code>project/feature_name/add_hoge</code>branch的话会出现下面的error:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">master</span><br><span class="line">* project/feature_name</span><br><span class="line"></span><br><span class="line">$ git checkout -b project/feature_name/add_hoge</span><br><span class="line">fatal: cannot lock ref &apos;project/feature_name/add_hoge&apos;:</span><br><span class="line">&apos;project/feature_name&apos; exists; cannot create &apos;project/feature_name/add_hoge&apos;</span><br></pre></td></tr></table></figure><hr><h3 id="Error原因："><a href="#Error原因：" class="headerlink" title="Error原因："></a>Error原因：</h3><p>如果在Git上试图创建<code>foo/bar</code>这样的分支的话,就会在<code>.git</code>路径的下面创建一个<code>foo</code>的路径。<br>而如果别人已经创建过<code>foo</code>分支的话说明<code>foo</code>路径已经存在,就会导致刚刚这样的错误。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git co -b hoge</span><br><span class="line">Switched to a new branch &apos;hoge&apos;</span><br><span class="line">$ git co -b hoge/fuga</span><br><span class="line">fatal: cannot lock ref &apos;refs/heads/hoge/fuga&apos;: &apos;refs/heads/hoge&apos; exists; cannot create &apos;refs/heads/hoge/fuga&apos;</span><br></pre></td></tr></table></figure><hr><h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><p>改变根分支的分支名:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NG: project/feature_name</span><br><span class="line">OK: project/feature_name/top</span><br></pre></td></tr></table></figure><p>不使用<code>/</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">例） project/feature_name_add_hoge</span><br><span class="line">例） project/feature_name--add_hoge</span><br><span class="line">例） project/feature_name__add_hoge</span><br></pre></td></tr></table></figure><p>或者干脆换一个不冲突的分支名就好了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Git Error: 「fatal: cannot lock ref …」&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="https://kisky3.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Vue Route Redirect on Refresh</title>
    <link href="https://kisky3.github.io/2020/08/03/VueRouterAlert/"/>
    <id>https://kisky3.github.io/2020/08/03/VueRouterAlert/</id>
    <published>2020-08-03T14:50:46.000Z</published>
    <updated>2021-05-13T14:53:29.387Z</updated>
    
    <content type="html"><![CDATA[<p>Vue Router的页面刷新处理</p><a id="more"></a><p>上一篇文章里我们写了如何利用Vue+Vuetify打造自定义的消息确认组件<br><a href="'https://kisky3.github.io/2020/07/14/VueAlert/'">Vue+Vuetify打造独自的消息确认组件</a></p><p>今天我们来利用打造好的组件来写一个常见的需求。<br>比如用户在输入数据时,刷新页面或者进行了页面跳转,为了防止数据丢失应该跳出弹窗提示问用户是否保存数据。</p><p>需求如下:(自定义消息组件已经可以使用)</p><p>1.从页面A跳转到页面B的时候进行页面B的自动刷新,以便获取最新的数据。<br>(包括浏览器上的返回和代码里a标签的返回)</p><p>2.从页面A跳转到页面B的时候,跳出自定义的弹窗,提示是否跳转页面。</p><p>3.在特定的编辑页面进行手动刷新(在浏览器上按刷新按钮)的时候,跳出系统自带弹窗提示是否刷新。</p><hr><h3 id="需求1"><a href="#需求1" class="headerlink" title="需求1"></a>需求1</h3><blockquote><p>1.从页面A跳转到页面B的时候进行页面B的自动刷新,以便获取最新的数据。<br>(包括浏览器上的返回和代码里a标签的返回)</p></blockquote><p>这个可以通过App.vue里对router的watch和页面跳转时动态路由匹配的判断来进行刷新。<br>刷新可以用<code>this.$router.go(0);</code> (当然也有别的写法)</p><p>※ 提醒一下,当使用路由参数时,例如从<code>foo</code>导航到<code>bar</code>,原来的组件实例会被复用。因为两个路由都渲染同个组件,比起销毁再创建,复用则显得更加高效。不过,这也意味着组件的生命周期钩子不会再被调用。</p><p>App.vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">   $route(to, <span class="keyword">from</span>) &#123;</span><br><span class="line">     <span class="keyword">if</span> (<span class="keyword">from</span>.name === <span class="string">"foo"</span> &amp;&amp; to.name === <span class="string">"bar"</span>) &#123;</span><br><span class="line">       <span class="comment">// 在这里刷新</span></span><br><span class="line">       <span class="keyword">this</span>.$router.go(<span class="number">0</span>);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;,</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><hr><h3 id="需求2"><a href="#需求2" class="headerlink" title="需求2"></a>需求2</h3><blockquote><p>2.从页面A跳转到页面B的时候,跳出自定义的弹窗,提示是否跳转页面。<br>在A页面的component里定义<code>beforeRouteLeave</code>事件。</p></blockquote><p>你可以在路由组件内直接定义以下路由导航守卫,比如<code>beforeRouteEnter</code>,<code>beforeRouteUpdate (2.2 新增)</code>,<code>beforeRouteLeave</code>,比如具体的说明如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Foo = &#123;</span><br><span class="line">  template: <span class="string">`...`</span>,</span><br><span class="line">  beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="comment">// 在渲染该组件的对应路由被 confirm 前调用</span></span><br><span class="line">    <span class="comment">// 不！能！获取组件实例 `this`</span></span><br><span class="line">    <span class="comment">// 因为当守卫执行前，组件实例还没被创建</span></span><br><span class="line">  &#125;,</span><br><span class="line">  beforeRouteUpdate (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="comment">// 在当前路由改变，但是该组件被复用时调用</span></span><br><span class="line">    <span class="comment">// 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，</span></span><br><span class="line">    <span class="comment">// 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span></span><br><span class="line">    <span class="comment">// 可以访问组件实例 `this`</span></span><br><span class="line">  &#125;,</span><br><span class="line">  beforeRouteLeave (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="comment">// 导航离开该组件的对应路由时调用</span></span><br><span class="line">    <span class="comment">// 可以访问组件实例 `this`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了满足这个需求我们使用<code>beforeRouteLeave</code>来通过追加自己的条件和动态路由匹配来调出自定义弹窗。</p><p>实例:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">beforeRouteLeave(to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="keyword">const</span> goback =</span><br><span class="line">      to.name === <span class="string">"foo"</span> &amp;&amp;</span><br><span class="line">      <span class="keyword">from</span>.name === <span class="string">"bar"</span> &amp;&amp;</span><br><span class="line">      !<span class="keyword">this</span>.isConfirm;</span><br><span class="line">    <span class="keyword">if</span> (goback) &#123;</span><br><span class="line">      <span class="comment">// 调用弹窗</span></span><br><span class="line">        <span class="keyword">this</span>.$confirm(&#123;</span><br><span class="line">          title: <span class="string">"このサイトを離れますか？"</span>,</span><br><span class="line">          message: <span class="string">"編集中のものは保存されませんが、よろしいですか"</span>,</span><br><span class="line">          option: <span class="string">"confirm"</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 取消浏览器自定义弹窗</span></span><br><span class="line">          <span class="keyword">this</span>.destoryBeforeUnload();</span><br><span class="line">          <span class="comment">// 点击确认的时候进行页面跳转</span></span><br><span class="line">          next();</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 点击确认的时候不进行页面跳转</span></span><br><span class="line">          next(<span class="literal">false</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      next();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><hr><h3 id="需求3"><a href="#需求3" class="headerlink" title="需求3"></a>需求3</h3><blockquote><p>3.在特定的编辑页面进行手动刷新(在浏览器上按刷新按钮)的时候,跳出系统自带弹窗提示是否刷新。</p></blockquote><p>我们可以考虑使用<code>beforeunload事件</code>:</p><blockquote><p><code>Window: beforeunload event</code>:当浏览器窗口关闭或者刷新时, 会触发beforeunload事件。当前页面不会直接关闭, 可以点击确定按钮关闭或刷新, 也可以取消关闭或刷新。但是请注意, 并非所有浏览器都支持此方法, 而有些浏览器需要事件处理程序实现两个遗留方法中的一个作为代替：</p></blockquote><blockquote><p>将字符串分配给事件的returnValue属性<br>从事件处理程序返回一个字符串。</p></blockquote><blockquote><p>某些浏览器过去在确认对话框中显示返回的字符串, 从而使事件处理程序能够向用户显示自定义消息。但是, 此方法已被弃用, 并且在大多数浏览器中不再支持。</p></blockquote><p>所以我们可以像下面这样给window添加或者移除弹窗:<br>在其他使用自定义弹出框的时候要记得将这个事件destory了(<code>destoryBeforeUnload</code>)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在按浏览器上的刷新按钮自动监视并弹出弹框</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"beforeunload"</span>, <span class="keyword">this</span>.handleBeforeUnload);</span><br><span class="line"></span><br><span class="line">destoryBeforeUnload() &#123;</span><br><span class="line">  <span class="comment">// 移除弹窗</span></span><br><span class="line">  <span class="built_in">window</span>.removeEventListener(<span class="string">"beforeunload"</span>, <span class="keyword">this</span>.handleBeforeUnload);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">handleBeforeUnload(e) &#123;</span><br><span class="line">  e.preventDefault();</span><br><span class="line">  <span class="keyword">const</span> message =</span><br><span class="line">  <span class="string">"このサイトを離れますか？\n行った変更が保存されない可能性があります。"</span>;</span><br><span class="line">  e.returnValue = message;</span><br><span class="line">  <span class="keyword">return</span> message;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>以上！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Vue Router的页面刷新处理&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="Router" scheme="https://kisky3.github.io/tags/Router/"/>
    
      <category term="Vue" scheme="https://kisky3.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue+Vuetify Confirm and Alert Component</title>
    <link href="https://kisky3.github.io/2020/07/14/VueAlert/"/>
    <id>https://kisky3.github.io/2020/07/14/VueAlert/</id>
    <published>2020-07-14T14:50:46.000Z</published>
    <updated>2021-05-13T14:53:29.360Z</updated>
    
    <content type="html"><![CDATA[<p>Vue+Vuetify打造独自的消息确认组件</p><a id="more"></a><p> vue框架自己好像没有弹出框, 而vuetify有弹出框v-dialog, 没有确认框confirm, 虽然确认框本身就是弹出框, 但是弹出框的功能有个特点, 就是确定做一件事情, 而取消了就是做另一件事情, 类似一个Promise要做的事情。</p><p>今天主要就是要自定义一个确认框, 我们利用组件的思维, 先定义组件结构, 然后定义组件如何配合文档document工作, 最后声明和调用。按照这个思路, 我们分如下几步：</p><p>1.写一个confirm的自定义组件<br> src/components/atoms/Confirm.vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"dialogwrapper"</span> v-<span class="keyword">if</span>=<span class="string">"show"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"overlay"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &lt;v-card <span class="class"><span class="keyword">class</span></span>=<span class="string">"dialog"</span>&gt;</span><br><span class="line">      &lt;v-card-title&gt;&#123;&#123; title &#125;&#125;&lt;<span class="regexp">/v-card-title&gt;</span></span><br><span class="line"><span class="regexp">      &lt;v-card-text&gt; &#123;&#123; message &#125;&#125; &lt;/</span>v-card-text&gt;</span><br><span class="line">      &lt;v-card-actions&gt;</span><br><span class="line">        &lt;v-btn @click=<span class="string">"ok"</span>&gt;確認&lt;<span class="regexp">/v-btn&gt;</span></span><br><span class="line"><span class="regexp">        &lt;v-btn v-if="option === 'confirm'" @click="cancel"&gt;キャンセル&lt;/</span>v-btn&gt;</span><br><span class="line">      &lt;<span class="regexp">/v-card-actions&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>v-card&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      promiseStatus: <span class="literal">null</span>,</span><br><span class="line">      show: <span class="literal">false</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    confirm() &#123;</span><br><span class="line">      <span class="keyword">this</span>.show = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.promiseStatus = &#123; resolve, reject &#125;;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    ok() &#123;</span><br><span class="line">      <span class="keyword">this</span>.show = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">this</span>.promiseStatus &amp;&amp; <span class="keyword">this</span>.promiseStatus.resolve();</span><br><span class="line">    &#125;,</span><br><span class="line">    cancel() &#123;</span><br><span class="line">      <span class="keyword">this</span>.show = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">this</span>.promiseStatus &amp;&amp; <span class="keyword">this</span>.promiseStatus.reject();</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;style&gt;</span></span><br><span class="line"><span class="regexp">.dialogwrapper &#123;</span></span><br><span class="line"><span class="regexp">  align-items: center;</span></span><br><span class="line"><span class="regexp">  display: flex;</span></span><br><span class="line"><span class="regexp">  height: 100%;</span></span><br><span class="line"><span class="regexp">  justify-content: center;</span></span><br><span class="line"><span class="regexp">  left: 0px;</span></span><br><span class="line"><span class="regexp">  pointer-events: none;</span></span><br><span class="line"><span class="regexp">  position: fixed;</span></span><br><span class="line"><span class="regexp">  top: 0px;</span></span><br><span class="line"><span class="regexp">  width: 100%;</span></span><br><span class="line"><span class="regexp">  z-index: 6;</span></span><br><span class="line"><span class="regexp">  transition: all 0.2s cubic-bezier(0.25, 0.8, 0.25, 1) 0s, z-index 1ms ease 0s;</span></span><br><span class="line"><span class="regexp">  outline: none;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">.dialog &#123;</span></span><br><span class="line"><span class="regexp">  overflow-y: auto;</span></span><br><span class="line"><span class="regexp">  pointer-events: auto;</span></span><br><span class="line"><span class="regexp">  width: 100%;</span></span><br><span class="line"><span class="regexp">  z-index: inherit;</span></span><br><span class="line"><span class="regexp">  box-shadow: rgba(0, 0, 0, 0.2) 0px 11px 15px -7px,</span></span><br><span class="line"><span class="regexp">    rgba(0, 0, 0, 0.14) 0px 24px 38px 3px, rgba(0, 0, 0, 0.12) 0px 9px 46px 8px;</span></span><br><span class="line"><span class="regexp">  border-radius: 4px;</span></span><br><span class="line"><span class="regexp">  margin: 24px;</span></span><br><span class="line"><span class="regexp">  transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1) 0s;</span></span><br><span class="line"><span class="regexp">  max-width: 290px;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">.overlay &#123;</span></span><br><span class="line"><span class="regexp">  align-items: center;</span></span><br><span class="line"><span class="regexp">  border-radius: inherit;</span></span><br><span class="line"><span class="regexp">  display: flex;</span></span><br><span class="line"><span class="regexp">  justify-content: center;</span></span><br><span class="line"><span class="regexp">  position: fixed;</span></span><br><span class="line"><span class="regexp">  top: 0;</span></span><br><span class="line"><span class="regexp">  left: 0;</span></span><br><span class="line"><span class="regexp">  right: 0;</span></span><br><span class="line"><span class="regexp">  bottom: 0;</span></span><br><span class="line"><span class="regexp">  pointer-events: auto;</span></span><br><span class="line"><span class="regexp">  background: #000;</span></span><br><span class="line"><span class="regexp">  opacity: 0.46;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">.v-card__actions &#123;</span></span><br><span class="line"><span class="regexp">  justify-content: space-evenly;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure><p>2、定义插件src/plugins/confirm.ts<br>src/plugins/confirm.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> Confirm <span class="keyword">from</span> <span class="string">"../../src/components/atoms/Confirm.vue"</span>;</span><br><span class="line"><span class="keyword">const</span> VueComponent = Vue.extend(Confirm);</span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> VueComponent().$mount();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> init = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> confirm = <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">Object</span>.assign(vm, options, &#123;</span><br><span class="line">    type: <span class="string">"confirm"</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">if</span> (!init) &#123;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(vm.$el);</span><br><span class="line">    init = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (vm <span class="keyword">as</span> any).confirm();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> confirm;</span><br></pre></td></tr></table></figure><p>3、全局声明组件src/main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"><span class="keyword">import</span> vuetify <span class="keyword">from</span> <span class="string">'@/plugins/vuetify'</span></span><br><span class="line"><span class="keyword">import</span> confirm <span class="keyword">from</span> <span class="string">'@/plugins/confirm'</span></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line">Vue.prototype.$confirm = confirm</span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  router,</span><br><span class="line">  vuetify,</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>4.调用src/components/TestPage.vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;v-card&gt;</span><br><span class="line">&lt;v-btn @click=<span class="string">"showConfirm"</span>&gt;open&lt;<span class="regexp">/v-btn&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>v-card&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">methods: &#123;</span></span><br><span class="line"><span class="regexp">showConfirm()&#123;</span></span><br><span class="line"><span class="regexp">  this.$confirm(&#123;</span></span><br><span class="line"><span class="regexp">          title: "このサイトを離れますか？",</span></span><br><span class="line"><span class="regexp">          message: "編集中のものは保存されませんが、よろしいですか",</span></span><br><span class="line"><span class="regexp">          option: "confirm",</span></span><br><span class="line"><span class="regexp">          /</span><span class="regexp">/没有取消按钮的时候用option: "alert"</span></span><br><span class="line"><span class="regexp">        &#125;)</span></span><br><span class="line"><span class="regexp">        .then(() =&gt; &#123;</span></span><br><span class="line"><span class="regexp">          next();</span></span><br><span class="line"><span class="regexp">        &#125;)</span></span><br><span class="line"><span class="regexp">        .catch(() =&gt; &#123;</span></span><br><span class="line"><span class="regexp">          next(false);</span></span><br><span class="line"><span class="regexp">        &#125;);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>5.在src/shims-tsx.d.ts里定义类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">type ConfirmOptions = &#123;</span><br><span class="line">  title: string;</span><br><span class="line">  message: string;</span><br><span class="line">  option: string;</span><br><span class="line">&#125;;</span><br><span class="line">declare <span class="built_in">module</span> <span class="string">"vue/types/vue"</span> &#123;</span><br><span class="line">  interface Vue &#123;</span><br><span class="line">    $confirm: <span class="function">(<span class="params">options: ConfirmOptions</span>) =&gt;</span> <span class="built_in">Promise</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终呈现的效果：<br><img src="./1.png" style="width:500px"></p><p>以上是一个简单的示例, 我们在需要使用的地方直接通过this.$confirm().then().catch()就可以把逻辑全部设置好, 可以看出this.$confirm是一个Promise, 而这个Promise是通过定义组件结构的时候confirm方法返回的。如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">confirm() &#123;</span><br><span class="line"><span class="keyword">let</span> _this = <span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">this</span>.show = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">_this.promiseStatus = &#123;resolve,reject&#125;;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在src/plugins/confirm.js中通过了一些方法找到了组件挂载点, 组件元素, 组件中的方法。</p><p>这个组件不比vuetify自带的v-dialog一开始就是长在文档中的, 而是需要我们手动appendChild的方式将元素插入文档中。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Vue+Vuetify打造独自的消息确认组件&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Knowledge" scheme="https://kisky3.github.io/categories/Front-end-Knowledge/"/>
    
    
      <category term="Vuex" scheme="https://kisky3.github.io/tags/Vuex/"/>
    
  </entry>
  
  <entry>
    <title>Vue Eslint Setting</title>
    <link href="https://kisky3.github.io/2020/07/06/vueeslintsetting/"/>
    <id>https://kisky3.github.io/2020/07/06/vueeslintsetting/</id>
    <published>2020-07-06T11:16:14.000Z</published>
    <updated>2021-05-13T14:53:29.705Z</updated>
    
    <content type="html"><![CDATA[<p>Vue 的 Eslint 设定(自动修正)</p><a id="more"></a><p>因为经常要设置所以做个 memo：</p><table><thead><tr><th>自动格式的对象文件</th><th>npm 库(package.json)</th><th>.eslintrc.js 的 extends</th></tr></thead><tbody><tr><td>vue(template)</td><td>eslint-plugin-vue</td><td>plugin:vue/recommended</td></tr><tr><td>vue(script)</td><td>eslint</td><td>eslint:recommended</td></tr><tr><td>js</td><td>eslint</td><td>eslint:recommended</td></tr></tbody></table><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>package.json 更新：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">   <span class="string">"lint"</span>: <span class="string">"eslint --ext .js,.vue src"</span>,</span><br><span class="line">   <span class="string">"lint:fix"</span>: <span class="string">"eslint --fix --ext .js,.vue src"</span></span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">   <span class="string">"babel-core"</span>: <span class="string">"^6.26.3"</span>,</span><br><span class="line">   <span class="string">"babel-eslint"</span>: <span class="string">"^10.0.1"</span>,</span><br><span class="line">   <span class="string">"babel-helper-vue-jsx-merge-props"</span>: <span class="string">"^2.0.3"</span>,</span><br><span class="line">   <span class="string">"babel-plugin-istanbul"</span>: <span class="string">"^5.1.0"</span>,</span><br><span class="line">   <span class="string">"babel-plugin-syntax-jsx"</span>: <span class="string">"^6.18.0"</span>,</span><br><span class="line">   <span class="string">"babel-plugin-transform-runtime"</span>: <span class="string">"^6.23.0"</span>,</span><br><span class="line">   <span class="string">"babel-plugin-transform-vue-jsx"</span>: <span class="string">"^3.7.0"</span>,</span><br><span class="line">   <span class="string">"eslint"</span>: <span class="string">"^5.12.1"</span>,</span><br><span class="line">   <span class="string">"eslint-config-standard"</span>: <span class="string">"^12.0.0"</span>,</span><br><span class="line">   <span class="string">"eslint-plugin-import"</span>: <span class="string">"^2.14.0"</span>,</span><br><span class="line">   <span class="string">"eslint-plugin-node"</span>: <span class="string">"^8.0.1"</span>,</span><br><span class="line">   <span class="string">"eslint-plugin-promise"</span>: <span class="string">"^4.0.1"</span>,</span><br><span class="line">   <span class="string">"eslint-plugin-standard"</span>: <span class="string">"^4.0.0"</span>,</span><br><span class="line">   <span class="string">"eslint-plugin-vue"</span>: <span class="string">"^5.1.0"</span></span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><p>更新后把 package-lock.json 和 nodemodules 删除后，重新安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>安装好后修改以下文件：</p><p>.eslintrc.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [<span class="string">'vue'</span>],</span><br><span class="line">  env: &#123;</span><br><span class="line">    es6: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  extends: [<span class="string">'eslint:recommended'</span>, <span class="string">'plugin:vue/essential'</span>],</span><br><span class="line">  rules: &#123;</span><br><span class="line">    <span class="string">'arrow-body-style'</span>: <span class="string">'error'</span>,</span><br><span class="line">    <span class="string">'arrow-parens'</span>: <span class="string">'error'</span>,</span><br><span class="line">    <span class="string">'arrow-spacing'</span>: <span class="string">'error'</span>,</span><br><span class="line">    <span class="string">'generator-star-spacing'</span>: <span class="string">'error'</span>,</span><br><span class="line">    <span class="string">'no-duplicate-imports'</span>: <span class="string">'error'</span>,</span><br><span class="line">    <span class="string">'no-useless-computed-key'</span>: <span class="string">'error'</span>,</span><br><span class="line">    <span class="string">'no-useless-constructor'</span>: <span class="string">'error'</span>,</span><br><span class="line">    <span class="string">'no-useless-rename'</span>: <span class="string">'error'</span>,</span><br><span class="line">    <span class="string">'no-var'</span>: <span class="string">'error'</span>,</span><br><span class="line">    <span class="string">'object-shorthand'</span>: <span class="string">'error'</span>,</span><br><span class="line">    <span class="string">'prefer-const'</span>: <span class="string">'error'</span>,</span><br><span class="line">    <span class="string">'prefer-rest-params'</span>: <span class="string">'error'</span>,</span><br><span class="line">    <span class="string">'prefer-spread'</span>: <span class="string">'error'</span>,</span><br><span class="line">    <span class="string">'prefer-template'</span>: <span class="string">'error'</span>,</span><br><span class="line">    <span class="string">'rest-spread-spacing'</span>: <span class="string">'error'</span>,</span><br><span class="line">    <span class="string">'template-curly-spacing'</span>: <span class="string">'error'</span>,</span><br><span class="line">    <span class="string">'yield-star-spacing'</span>: <span class="string">'error'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>./vscode/settings.json</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// vscode默认启用了根据文件类型自动设置tabsize的选项</span></span><br><span class="line">  <span class="string">"editor.detectIndentation"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// 重新设定tabsize</span></span><br><span class="line">  <span class="string">"editor.tabSize"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="comment">// #每次保存的时候自动格式化</span></span><br><span class="line">  <span class="string">"editor.formatOnSave"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// #每次保存的时候将代码按eslint格式进行修复</span></span><br><span class="line">  <span class="string">"eslint.autoFixOnSave"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 添加 vue 支持</span></span><br><span class="line">  <span class="string">"eslint.validate"</span>: [</span><br><span class="line">    <span class="string">"javascript"</span>,</span><br><span class="line">    <span class="string">"javascriptreact"</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"language"</span>: <span class="string">"vue"</span>,</span><br><span class="line">      <span class="string">"autoFix"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// #让prettier使用eslint的代码格式进行校验</span></span><br><span class="line">  <span class="string">"prettier.eslintIntegration"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// #去掉代码结尾的分号</span></span><br><span class="line">  <span class="string">"prettier.semi"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// #使用带引号替代双引号</span></span><br><span class="line">  <span class="string">"prettier.singleQuote"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// #让函数(名)和后面的括号之间加个空格</span></span><br><span class="line">  <span class="string">"javascript.format.insertSpaceBeforeFunctionParenthesis"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// #这个按用户自身习惯选择</span></span><br><span class="line">  <span class="string">"vetur.format.defaultFormatter.html"</span>: <span class="string">"js-beautify-html"</span>,</span><br><span class="line">  <span class="comment">// #让vue中的js按编辑器自带的ts格式进行格式化</span></span><br><span class="line">  <span class="string">"vetur.format.defaultFormatter.js"</span>: <span class="string">"vscode-typescript"</span>,</span><br><span class="line">  <span class="string">"vetur.format.defaultFormatterOptions"</span>: &#123;</span><br><span class="line">    <span class="string">"js-beautify-html"</span>: &#123;</span><br><span class="line">      <span class="string">"wrap_attributes"</span>: <span class="string">"force-aligned"</span></span><br><span class="line">      <span class="comment">// #vue组件中html代码格式化样式</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 格式化stylus, 需安装Manta's Stylus Supremacy插件</span></span><br><span class="line">  <span class="string">"stylusSupremacy.insertColons"</span>: <span class="literal">false</span>, <span class="comment">// 是否插入冒号</span></span><br><span class="line">  <span class="string">"stylusSupremacy.insertSemicolons"</span>: <span class="literal">false</span>, <span class="comment">// 是否插入分好</span></span><br><span class="line">  <span class="string">"stylusSupremacy.insertBraces"</span>: <span class="literal">false</span>, <span class="comment">// 是否插入大括号</span></span><br><span class="line">  <span class="string">"stylusSupremacy.insertNewLineAroundImports"</span>: <span class="literal">false</span>, <span class="comment">// import之后是否换行</span></span><br><span class="line">  <span class="string">"stylusSupremacy.insertNewLineAroundBlocks"</span>: <span class="literal">false</span> <span class="comment">// 两个选择器中是否换行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Vue 的 Eslint 设定(自动修正)&lt;/p&gt;
    
    </summary>
    
      <category term="System Setting" scheme="https://kisky3.github.io/categories/System-Setting/"/>
    
    
      <category term="eslintsrc" scheme="https://kisky3.github.io/tags/eslintsrc/"/>
    
      <category term="autosave" scheme="https://kisky3.github.io/tags/autosave/"/>
    
  </entry>
  
</feed>
